module vk;
const MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
const UUID_SIZE = 16;
const LUID_SIZE = 8;
const MAX_EXTENSION_NAME_SIZE = 256;
const MAX_DESCRIPTION_SIZE = 256;
const MAX_MEMORY_TYPES = 32;
const MAX_MEMORY_HEAPS = 16;
const LOD_CLAMP_NONE = 1000.0F;
const REMAINING_MIP_LEVELS = (~0U);
const REMAINING_ARRAY_LAYERS = (~0U);
const REMAINING_3D_SLICES_EXT = (~0U);
const WHOLE_SIZE = (~0ULL);
const ATTACHMENT_UNUSED = (~0U);
const TRUE = 1;
const FALSE = 0;
const QUEUE_FAMILY_IGNORED = (~0U);
const QUEUE_FAMILY_EXTERNAL = (~1U);
const QUEUE_FAMILY_FOREIGN_EXT = (~2U);
const SUBPASS_EXTERNAL = (~0U);
const MAX_DEVICE_GROUP_SIZE = 32;
const MAX_DRIVER_NAME_SIZE = 256;
const MAX_DRIVER_INFO_SIZE = 256;
const SHADER_UNUSED_KHR = (~0U);
const MAX_GLOBAL_PRIORITY_SIZE_KHR = 16;
const MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = 32;
const MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR = 7;
const SHADER_INDEX_UNUSED_AMDX = (~0U);

distinct Instance = void*;
distinct PhysicalDevice = void*;
distinct Device = void*;
distinct Queue = void*;
distinct CommandBuffer = void*;
distinct DeviceMemory = void*;
distinct CommandPool = void*;
distinct Buffer = void*;
distinct BufferView = void*;
distinct Image = void*;
distinct ImageView = void*;
distinct ShaderModule = void*;
distinct Pipeline = void*;
distinct PipelineLayout = void*;
distinct Sampler = void*;
distinct DescriptorSet = void*;
distinct DescriptorSetLayout = void*;
distinct DescriptorPool = void*;
distinct Fence = void*;
distinct Semaphore = void*;
distinct Event = void*;
distinct QueryPool = void*;
distinct Framebuffer = void*;
distinct RenderPass = void*;
distinct PipelineCache = void*;
distinct IndirectCommandsLayoutNV = void*;
distinct DescriptorUpdateTemplate = void*;
distinct SamplerYcbcrConversion = void*;
distinct ValidationCacheEXT = void*;
distinct AccelerationStructureKHR = void*;
distinct AccelerationStructureNV = void*;
distinct PerformanceConfigurationINTEL = void*;
distinct BufferCollectionFUCHSIA = void*;
distinct DeferredOperationKHR = void*;
distinct PrivateDataSlot = void*;
distinct CuModuleNVX = void*;
distinct CuFunctionNVX = void*;
distinct OpticalFlowSessionNV = void*;
distinct MicromapEXT = void*;
distinct ShaderEXT = void*;
distinct DisplayKHR = void*;
distinct DisplayModeKHR = void*;
distinct SurfaceKHR = void*;
distinct SwapchainKHR = void*;
distinct DebugReportCallbackEXT = void*;
distinct DebugUtilsMessengerEXT = void*;
distinct VideoSessionKHR = void*;
distinct VideoSessionParametersKHR = void*;
distinct SemaphoreSciSyncPoolNV = void*;
distinct CudaModuleNV = void*;
distinct CudaFunctionNV = void*;

def SampleMask = uint32_t;
def Bool32 = uint32_t;
def Flags = uint32_t;
def Flags64 = uint64_t;
def DeviceSize = uint64_t;
def DeviceAddress = uint64_t;
def RemoteAddressNV = void;

distinct ImageLayout = inline uint;
const ImageLayout IMAGE_LAYOUT_UNDEFINED = 0;
const ImageLayout IMAGE_LAYOUT_GENERAL = 1;
const ImageLayout IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2;
const ImageLayout IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3;
const ImageLayout IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4;
const ImageLayout IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5;
const ImageLayout IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6;
const ImageLayout IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7;
const ImageLayout IMAGE_LAYOUT_PREINITIALIZED = 8;
const ImageLayout IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000;
const ImageLayout IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001;
const ImageLayout IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000;
const ImageLayout IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001;
const ImageLayout IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002;
const ImageLayout IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003;
const ImageLayout IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000;
const ImageLayout IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001;

distinct AttachmentLoadOp = inline uint;
const AttachmentLoadOp ATTACHMENT_LOAD_OP_LOAD = 0;
const AttachmentLoadOp ATTACHMENT_LOAD_OP_CLEAR = 1;
const AttachmentLoadOp ATTACHMENT_LOAD_OP_DONT_CARE = 2;

distinct AttachmentStoreOp = inline uint;
const AttachmentStoreOp ATTACHMENT_STORE_OP_STORE = 0;
const AttachmentStoreOp ATTACHMENT_STORE_OP_DONT_CARE = 1;
const AttachmentStoreOp ATTACHMENT_STORE_OP_NONE = 1000301000;

distinct ImageType = inline uint;
const ImageType IMAGE_TYPE_1D = 0;
const ImageType IMAGE_TYPE_2D = 1;
const ImageType IMAGE_TYPE_3D = 2;

distinct ImageTiling = inline uint;
const ImageTiling IMAGE_TILING_OPTIMAL = 0;
const ImageTiling IMAGE_TILING_LINEAR = 1;

distinct ImageViewType = inline uint;
const ImageViewType IMAGE_VIEW_TYPE_1D = 0;
const ImageViewType IMAGE_VIEW_TYPE_2D = 1;
const ImageViewType IMAGE_VIEW_TYPE_3D = 2;
const ImageViewType IMAGE_VIEW_TYPE_CUBE = 3;
const ImageViewType IMAGE_VIEW_TYPE_1D_ARRAY = 4;
const ImageViewType IMAGE_VIEW_TYPE_2D_ARRAY = 5;
const ImageViewType IMAGE_VIEW_TYPE_CUBE_ARRAY = 6;

distinct CommandBufferLevel = inline uint;
const CommandBufferLevel COMMAND_BUFFER_LEVEL_PRIMARY = 0;
const CommandBufferLevel COMMAND_BUFFER_LEVEL_SECONDARY = 1;

distinct ComponentSwizzle = inline uint;
const ComponentSwizzle COMPONENT_SWIZZLE_IDENTITY = 0;
const ComponentSwizzle COMPONENT_SWIZZLE_ZERO = 1;
const ComponentSwizzle COMPONENT_SWIZZLE_ONE = 2;
const ComponentSwizzle COMPONENT_SWIZZLE_R = 3;
const ComponentSwizzle COMPONENT_SWIZZLE_G = 4;
const ComponentSwizzle COMPONENT_SWIZZLE_B = 5;
const ComponentSwizzle COMPONENT_SWIZZLE_A = 6;

distinct DescriptorType = inline uint;
const DescriptorType DESCRIPTOR_TYPE_SAMPLER = 0;
const DescriptorType DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1;
const DescriptorType DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2;
const DescriptorType DESCRIPTOR_TYPE_STORAGE_IMAGE = 3;
const DescriptorType DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4;
const DescriptorType DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5;
const DescriptorType DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6;
const DescriptorType DESCRIPTOR_TYPE_STORAGE_BUFFER = 7;
const DescriptorType DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8;
const DescriptorType DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9;
const DescriptorType DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10;
const DescriptorType DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000;

distinct QueryType = inline uint;
const QueryType QUERY_TYPE_OCCLUSION = 0;
const QueryType QUERY_TYPE_PIPELINE_STATISTICS = 1;
const QueryType QUERY_TYPE_TIMESTAMP = 2;

distinct BorderColor = inline uint;
const BorderColor BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0;
const BorderColor BORDER_COLOR_INT_TRANSPARENT_BLACK = 1;
const BorderColor BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2;
const BorderColor BORDER_COLOR_INT_OPAQUE_BLACK = 3;
const BorderColor BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4;
const BorderColor BORDER_COLOR_INT_OPAQUE_WHITE = 5;

distinct PipelineBindPoint = inline uint;
const PipelineBindPoint PIPELINE_BIND_POINT_GRAPHICS = 0;
const PipelineBindPoint PIPELINE_BIND_POINT_COMPUTE = 1;

distinct PipelineCacheHeaderVersion = inline uint;
const PipelineCacheHeaderVersion PIPELINE_CACHE_HEADER_VERSION_ONE = 1;

distinct PrimitiveTopology = inline uint;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_POINT_LIST = 0;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_LINE_LIST = 1;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_LINE_STRIP = 2;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9;
const PrimitiveTopology PRIMITIVE_TOPOLOGY_PATCH_LIST = 10;

distinct SharingMode = inline uint;
const SharingMode SHARING_MODE_EXCLUSIVE = 0;
const SharingMode SHARING_MODE_CONCURRENT = 1;

distinct IndexType = inline uint;
const IndexType INDEX_TYPE_UINT16 = 0;
const IndexType INDEX_TYPE_UINT32 = 1;

distinct Filter = inline uint;
const Filter FILTER_NEAREST = 0;
const Filter FILTER_LINEAR = 1;

distinct SamplerMipmapMode = inline uint;
const SamplerMipmapMode SAMPLER_MIPMAP_MODE_NEAREST = 0;
const SamplerMipmapMode SAMPLER_MIPMAP_MODE_LINEAR = 1;

distinct SamplerAddressMode = inline uint;
const SamplerAddressMode SAMPLER_ADDRESS_MODE_REPEAT = 0;
const SamplerAddressMode SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1;
const SamplerAddressMode SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2;
const SamplerAddressMode SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3;
const SamplerAddressMode SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4;

distinct CompareOp = inline uint;
const CompareOp COMPARE_OP_NEVER = 0;
const CompareOp COMPARE_OP_LESS = 1;
const CompareOp COMPARE_OP_EQUAL = 2;
const CompareOp COMPARE_OP_LESS_OR_EQUAL = 3;
const CompareOp COMPARE_OP_GREATER = 4;
const CompareOp COMPARE_OP_NOT_EQUAL = 5;
const CompareOp COMPARE_OP_GREATER_OR_EQUAL = 6;
const CompareOp COMPARE_OP_ALWAYS = 7;

distinct PolygonMode = inline uint;
const PolygonMode POLYGON_MODE_FILL = 0;
const PolygonMode POLYGON_MODE_LINE = 1;
const PolygonMode POLYGON_MODE_POINT = 2;

distinct FrontFace = inline uint;
const FrontFace FRONT_FACE_COUNTER_CLOCKWISE = 0;
const FrontFace FRONT_FACE_CLOCKWISE = 1;

distinct BlendFactor = inline uint;
const BlendFactor BLEND_FACTOR_ZERO = 0;
const BlendFactor BLEND_FACTOR_ONE = 1;
const BlendFactor BLEND_FACTOR_SRC_COLOR = 2;
const BlendFactor BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3;
const BlendFactor BLEND_FACTOR_DST_COLOR = 4;
const BlendFactor BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5;
const BlendFactor BLEND_FACTOR_SRC_ALPHA = 6;
const BlendFactor BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7;
const BlendFactor BLEND_FACTOR_DST_ALPHA = 8;
const BlendFactor BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9;
const BlendFactor BLEND_FACTOR_CONSTANT_COLOR = 10;
const BlendFactor BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11;
const BlendFactor BLEND_FACTOR_CONSTANT_ALPHA = 12;
const BlendFactor BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13;
const BlendFactor BLEND_FACTOR_SRC_ALPHA_SATURATE = 14;
const BlendFactor BLEND_FACTOR_SRC1_COLOR = 15;
const BlendFactor BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16;
const BlendFactor BLEND_FACTOR_SRC1_ALPHA = 17;
const BlendFactor BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18;

distinct BlendOp = inline uint;
const BlendOp BLEND_OP_ADD = 0;
const BlendOp BLEND_OP_SUBTRACT = 1;
const BlendOp BLEND_OP_REVERSE_SUBTRACT = 2;
const BlendOp BLEND_OP_MIN = 3;
const BlendOp BLEND_OP_MAX = 4;

distinct StencilOp = inline uint;
const StencilOp STENCIL_OP_KEEP = 0;
const StencilOp STENCIL_OP_ZERO = 1;
const StencilOp STENCIL_OP_REPLACE = 2;
const StencilOp STENCIL_OP_INCREMENT_AND_CLAMP = 3;
const StencilOp STENCIL_OP_DECREMENT_AND_CLAMP = 4;
const StencilOp STENCIL_OP_INVERT = 5;
const StencilOp STENCIL_OP_INCREMENT_AND_WRAP = 6;
const StencilOp STENCIL_OP_DECREMENT_AND_WRAP = 7;

distinct LogicOp = inline uint;
const LogicOp LOGIC_OP_CLEAR = 0;
const LogicOp LOGIC_OP_AND = 1;
const LogicOp LOGIC_OP_AND_REVERSE = 2;
const LogicOp LOGIC_OP_COPY = 3;
const LogicOp LOGIC_OP_AND_INVERTED = 4;
const LogicOp LOGIC_OP_NO_OP = 5;
const LogicOp LOGIC_OP_XOR = 6;
const LogicOp LOGIC_OP_OR = 7;
const LogicOp LOGIC_OP_NOR = 8;
const LogicOp LOGIC_OP_EQUIVALENT = 9;
const LogicOp LOGIC_OP_INVERT = 10;
const LogicOp LOGIC_OP_OR_REVERSE = 11;
const LogicOp LOGIC_OP_COPY_INVERTED = 12;
const LogicOp LOGIC_OP_OR_INVERTED = 13;
const LogicOp LOGIC_OP_NAND = 14;
const LogicOp LOGIC_OP_SET = 15;

distinct InternalAllocationType = inline uint;
const InternalAllocationType INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0;

distinct SystemAllocationScope = inline uint;
const SystemAllocationScope SYSTEM_ALLOCATION_SCOPE_COMMAND = 0;
const SystemAllocationScope SYSTEM_ALLOCATION_SCOPE_OBJECT = 1;
const SystemAllocationScope SYSTEM_ALLOCATION_SCOPE_CACHE = 2;
const SystemAllocationScope SYSTEM_ALLOCATION_SCOPE_DEVICE = 3;
const SystemAllocationScope SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4;

distinct PhysicalDeviceType = inline uint;
const PhysicalDeviceType PHYSICAL_DEVICE_TYPE_OTHER = 0;
const PhysicalDeviceType PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1;
const PhysicalDeviceType PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2;
const PhysicalDeviceType PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3;
const PhysicalDeviceType PHYSICAL_DEVICE_TYPE_CPU = 4;

distinct VertexInputRate = inline uint;
const VertexInputRate VERTEX_INPUT_RATE_VERTEX = 0;
const VertexInputRate VERTEX_INPUT_RATE_INSTANCE = 1;

distinct Format = inline uint;
const Format FORMAT_UNDEFINED = 0;
const Format FORMAT_R4G4_UNORM_PACK8 = 1;
const Format FORMAT_R4G4B4A4_UNORM_PACK16 = 2;
const Format FORMAT_B4G4R4A4_UNORM_PACK16 = 3;
const Format FORMAT_R5G6B5_UNORM_PACK16 = 4;
const Format FORMAT_B5G6R5_UNORM_PACK16 = 5;
const Format FORMAT_R5G5B5A1_UNORM_PACK16 = 6;
const Format FORMAT_B5G5R5A1_UNORM_PACK16 = 7;
const Format FORMAT_A1R5G5B5_UNORM_PACK16 = 8;
const Format FORMAT_R8_UNORM = 9;
const Format FORMAT_R8_SNORM = 10;
const Format FORMAT_R8_USCALED = 11;
const Format FORMAT_R8_SSCALED = 12;
const Format FORMAT_R8_UINT = 13;
const Format FORMAT_R8_SINT = 14;
const Format FORMAT_R8_SRGB = 15;
const Format FORMAT_R8G8_UNORM = 16;
const Format FORMAT_R8G8_SNORM = 17;
const Format FORMAT_R8G8_USCALED = 18;
const Format FORMAT_R8G8_SSCALED = 19;
const Format FORMAT_R8G8_UINT = 20;
const Format FORMAT_R8G8_SINT = 21;
const Format FORMAT_R8G8_SRGB = 22;
const Format FORMAT_R8G8B8_UNORM = 23;
const Format FORMAT_R8G8B8_SNORM = 24;
const Format FORMAT_R8G8B8_USCALED = 25;
const Format FORMAT_R8G8B8_SSCALED = 26;
const Format FORMAT_R8G8B8_UINT = 27;
const Format FORMAT_R8G8B8_SINT = 28;
const Format FORMAT_R8G8B8_SRGB = 29;
const Format FORMAT_B8G8R8_UNORM = 30;
const Format FORMAT_B8G8R8_SNORM = 31;
const Format FORMAT_B8G8R8_USCALED = 32;
const Format FORMAT_B8G8R8_SSCALED = 33;
const Format FORMAT_B8G8R8_UINT = 34;
const Format FORMAT_B8G8R8_SINT = 35;
const Format FORMAT_B8G8R8_SRGB = 36;
const Format FORMAT_R8G8B8A8_UNORM = 37;
const Format FORMAT_R8G8B8A8_SNORM = 38;
const Format FORMAT_R8G8B8A8_USCALED = 39;
const Format FORMAT_R8G8B8A8_SSCALED = 40;
const Format FORMAT_R8G8B8A8_UINT = 41;
const Format FORMAT_R8G8B8A8_SINT = 42;
const Format FORMAT_R8G8B8A8_SRGB = 43;
const Format FORMAT_B8G8R8A8_UNORM = 44;
const Format FORMAT_B8G8R8A8_SNORM = 45;
const Format FORMAT_B8G8R8A8_USCALED = 46;
const Format FORMAT_B8G8R8A8_SSCALED = 47;
const Format FORMAT_B8G8R8A8_UINT = 48;
const Format FORMAT_B8G8R8A8_SINT = 49;
const Format FORMAT_B8G8R8A8_SRGB = 50;
const Format FORMAT_A8B8G8R8_UNORM_PACK32 = 51;
const Format FORMAT_A8B8G8R8_SNORM_PACK32 = 52;
const Format FORMAT_A8B8G8R8_USCALED_PACK32 = 53;
const Format FORMAT_A8B8G8R8_SSCALED_PACK32 = 54;
const Format FORMAT_A8B8G8R8_UINT_PACK32 = 55;
const Format FORMAT_A8B8G8R8_SINT_PACK32 = 56;
const Format FORMAT_A8B8G8R8_SRGB_PACK32 = 57;
const Format FORMAT_A2R10G10B10_UNORM_PACK32 = 58;
const Format FORMAT_A2R10G10B10_SNORM_PACK32 = 59;
const Format FORMAT_A2R10G10B10_USCALED_PACK32 = 60;
const Format FORMAT_A2R10G10B10_SSCALED_PACK32 = 61;
const Format FORMAT_A2R10G10B10_UINT_PACK32 = 62;
const Format FORMAT_A2R10G10B10_SINT_PACK32 = 63;
const Format FORMAT_A2B10G10R10_UNORM_PACK32 = 64;
const Format FORMAT_A2B10G10R10_SNORM_PACK32 = 65;
const Format FORMAT_A2B10G10R10_USCALED_PACK32 = 66;
const Format FORMAT_A2B10G10R10_SSCALED_PACK32 = 67;
const Format FORMAT_A2B10G10R10_UINT_PACK32 = 68;
const Format FORMAT_A2B10G10R10_SINT_PACK32 = 69;
const Format FORMAT_R16_UNORM = 70;
const Format FORMAT_R16_SNORM = 71;
const Format FORMAT_R16_USCALED = 72;
const Format FORMAT_R16_SSCALED = 73;
const Format FORMAT_R16_UINT = 74;
const Format FORMAT_R16_SINT = 75;
const Format FORMAT_R16_SFLOAT = 76;
const Format FORMAT_R16G16_UNORM = 77;
const Format FORMAT_R16G16_SNORM = 78;
const Format FORMAT_R16G16_USCALED = 79;
const Format FORMAT_R16G16_SSCALED = 80;
const Format FORMAT_R16G16_UINT = 81;
const Format FORMAT_R16G16_SINT = 82;
const Format FORMAT_R16G16_SFLOAT = 83;
const Format FORMAT_R16G16B16_UNORM = 84;
const Format FORMAT_R16G16B16_SNORM = 85;
const Format FORMAT_R16G16B16_USCALED = 86;
const Format FORMAT_R16G16B16_SSCALED = 87;
const Format FORMAT_R16G16B16_UINT = 88;
const Format FORMAT_R16G16B16_SINT = 89;
const Format FORMAT_R16G16B16_SFLOAT = 90;
const Format FORMAT_R16G16B16A16_UNORM = 91;
const Format FORMAT_R16G16B16A16_SNORM = 92;
const Format FORMAT_R16G16B16A16_USCALED = 93;
const Format FORMAT_R16G16B16A16_SSCALED = 94;
const Format FORMAT_R16G16B16A16_UINT = 95;
const Format FORMAT_R16G16B16A16_SINT = 96;
const Format FORMAT_R16G16B16A16_SFLOAT = 97;
const Format FORMAT_R32_UINT = 98;
const Format FORMAT_R32_SINT = 99;
const Format FORMAT_R32_SFLOAT = 100;
const Format FORMAT_R32G32_UINT = 101;
const Format FORMAT_R32G32_SINT = 102;
const Format FORMAT_R32G32_SFLOAT = 103;
const Format FORMAT_R32G32B32_UINT = 104;
const Format FORMAT_R32G32B32_SINT = 105;
const Format FORMAT_R32G32B32_SFLOAT = 106;
const Format FORMAT_R32G32B32A32_UINT = 107;
const Format FORMAT_R32G32B32A32_SINT = 108;
const Format FORMAT_R32G32B32A32_SFLOAT = 109;
const Format FORMAT_R64_UINT = 110;
const Format FORMAT_R64_SINT = 111;
const Format FORMAT_R64_SFLOAT = 112;
const Format FORMAT_R64G64_UINT = 113;
const Format FORMAT_R64G64_SINT = 114;
const Format FORMAT_R64G64_SFLOAT = 115;
const Format FORMAT_R64G64B64_UINT = 116;
const Format FORMAT_R64G64B64_SINT = 117;
const Format FORMAT_R64G64B64_SFLOAT = 118;
const Format FORMAT_R64G64B64A64_UINT = 119;
const Format FORMAT_R64G64B64A64_SINT = 120;
const Format FORMAT_R64G64B64A64_SFLOAT = 121;
const Format FORMAT_B10G11R11_UFLOAT_PACK32 = 122;
const Format FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;
const Format FORMAT_D16_UNORM = 124;
const Format FORMAT_X8_D24_UNORM_PACK32 = 125;
const Format FORMAT_D32_SFLOAT = 126;
const Format FORMAT_S8_UINT = 127;
const Format FORMAT_D16_UNORM_S8_UINT = 128;
const Format FORMAT_D24_UNORM_S8_UINT = 129;
const Format FORMAT_D32_SFLOAT_S8_UINT = 130;
const Format FORMAT_BC1_RGB_UNORM_BLOCK = 131;
const Format FORMAT_BC1_RGB_SRGB_BLOCK = 132;
const Format FORMAT_BC1_RGBA_UNORM_BLOCK = 133;
const Format FORMAT_BC1_RGBA_SRGB_BLOCK = 134;
const Format FORMAT_BC2_UNORM_BLOCK = 135;
const Format FORMAT_BC2_SRGB_BLOCK = 136;
const Format FORMAT_BC3_UNORM_BLOCK = 137;
const Format FORMAT_BC3_SRGB_BLOCK = 138;
const Format FORMAT_BC4_UNORM_BLOCK = 139;
const Format FORMAT_BC4_SNORM_BLOCK = 140;
const Format FORMAT_BC5_UNORM_BLOCK = 141;
const Format FORMAT_BC5_SNORM_BLOCK = 142;
const Format FORMAT_BC6H_UFLOAT_BLOCK = 143;
const Format FORMAT_BC6H_SFLOAT_BLOCK = 144;
const Format FORMAT_BC7_UNORM_BLOCK = 145;
const Format FORMAT_BC7_SRGB_BLOCK = 146;
const Format FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;
const Format FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;
const Format FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;
const Format FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;
const Format FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;
const Format FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;
const Format FORMAT_EAC_R11_UNORM_BLOCK = 153;
const Format FORMAT_EAC_R11_SNORM_BLOCK = 154;
const Format FORMAT_EAC_R11G11_UNORM_BLOCK = 155;
const Format FORMAT_EAC_R11G11_SNORM_BLOCK = 156;
const Format FORMAT_ASTC_4x4_UNORM_BLOCK = 157;
const Format FORMAT_ASTC_4x4_SRGB_BLOCK = 158;
const Format FORMAT_ASTC_5x4_UNORM_BLOCK = 159;
const Format FORMAT_ASTC_5x4_SRGB_BLOCK = 160;
const Format FORMAT_ASTC_5x5_UNORM_BLOCK = 161;
const Format FORMAT_ASTC_5x5_SRGB_BLOCK = 162;
const Format FORMAT_ASTC_6x5_UNORM_BLOCK = 163;
const Format FORMAT_ASTC_6x5_SRGB_BLOCK = 164;
const Format FORMAT_ASTC_6x6_UNORM_BLOCK = 165;
const Format FORMAT_ASTC_6x6_SRGB_BLOCK = 166;
const Format FORMAT_ASTC_8x5_UNORM_BLOCK = 167;
const Format FORMAT_ASTC_8x5_SRGB_BLOCK = 168;
const Format FORMAT_ASTC_8x6_UNORM_BLOCK = 169;
const Format FORMAT_ASTC_8x6_SRGB_BLOCK = 170;
const Format FORMAT_ASTC_8x8_UNORM_BLOCK = 171;
const Format FORMAT_ASTC_8x8_SRGB_BLOCK = 172;
const Format FORMAT_ASTC_10x5_UNORM_BLOCK = 173;
const Format FORMAT_ASTC_10x5_SRGB_BLOCK = 174;
const Format FORMAT_ASTC_10x6_UNORM_BLOCK = 175;
const Format FORMAT_ASTC_10x6_SRGB_BLOCK = 176;
const Format FORMAT_ASTC_10x8_UNORM_BLOCK = 177;
const Format FORMAT_ASTC_10x8_SRGB_BLOCK = 178;
const Format FORMAT_ASTC_10x10_UNORM_BLOCK = 179;
const Format FORMAT_ASTC_10x10_SRGB_BLOCK = 180;
const Format FORMAT_ASTC_12x10_UNORM_BLOCK = 181;
const Format FORMAT_ASTC_12x10_SRGB_BLOCK = 182;
const Format FORMAT_ASTC_12x12_UNORM_BLOCK = 183;
const Format FORMAT_ASTC_12x12_SRGB_BLOCK = 184;
const Format FORMAT_G8B8G8R8_422_UNORM = 1000156000;
const Format FORMAT_B8G8R8G8_422_UNORM = 1000156001;
const Format FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002;
const Format FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003;
const Format FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004;
const Format FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005;
const Format FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006;
const Format FORMAT_R10X6_UNORM_PACK16 = 1000156007;
const Format FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;
const Format FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;
const Format FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;
const Format FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;
const Format FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012;
const Format FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013;
const Format FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014;
const Format FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015;
const Format FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016;
const Format FORMAT_R12X4_UNORM_PACK16 = 1000156017;
const Format FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;
const Format FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;
const Format FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;
const Format FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;
const Format FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022;
const Format FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023;
const Format FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024;
const Format FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025;
const Format FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026;
const Format FORMAT_G16B16G16R16_422_UNORM = 1000156027;
const Format FORMAT_B16G16R16G16_422_UNORM = 1000156028;
const Format FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029;
const Format FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030;
const Format FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031;
const Format FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032;
const Format FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033;
const Format FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000;
const Format FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001;
const Format FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002;
const Format FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003;
const Format FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000;
const Format FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001;
const Format FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000;
const Format FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001;
const Format FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002;
const Format FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003;
const Format FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004;
const Format FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005;
const Format FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006;
const Format FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007;
const Format FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008;
const Format FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009;
const Format FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010;
const Format FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011;
const Format FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012;
const Format FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013;

distinct StructureType = inline uint;
const StructureType STRUCTURE_TYPE_APPLICATION_INFO = 0;
const StructureType STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1;
const StructureType STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2;
const StructureType STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3;
const StructureType STRUCTURE_TYPE_SUBMIT_INFO = 4;
const StructureType STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5;
const StructureType STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6;
const StructureType STRUCTURE_TYPE_BIND_SPARSE_INFO = 7;
const StructureType STRUCTURE_TYPE_FENCE_CREATE_INFO = 8;
const StructureType STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9;
const StructureType STRUCTURE_TYPE_EVENT_CREATE_INFO = 10;
const StructureType STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11;
const StructureType STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12;
const StructureType STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13;
const StructureType STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14;
const StructureType STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15;
const StructureType STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16;
const StructureType STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17;
const StructureType STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18;
const StructureType STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19;
const StructureType STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20;
const StructureType STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21;
const StructureType STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22;
const StructureType STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23;
const StructureType STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24;
const StructureType STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25;
const StructureType STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26;
const StructureType STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27;
const StructureType STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28;
const StructureType STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29;
const StructureType STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30;
const StructureType STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34;
const StructureType STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35;
const StructureType STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36;
const StructureType STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37;
const StructureType STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38;
const StructureType STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39;
const StructureType STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40;
const StructureType STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41;
const StructureType STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42;
const StructureType STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43;
const StructureType STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44;
const StructureType STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45;
const StructureType STRUCTURE_TYPE_MEMORY_BARRIER = 46;
const StructureType STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47;
const StructureType STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000;
const StructureType STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000;
const StructureType STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000;
const StructureType STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000;
const StructureType STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001;
const StructureType STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000;
const StructureType STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003;
const StructureType STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004;
const StructureType STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005;
const StructureType STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006;
const StructureType STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013;
const StructureType STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000;
const StructureType STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001;
const StructureType STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000;
const StructureType STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001;
const StructureType STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002;
const StructureType STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003;
const StructureType STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001;
const StructureType STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002;
const StructureType STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004;
const StructureType STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006;
const StructureType STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000;
const StructureType STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001;
const StructureType STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002;
const StructureType STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003;
const StructureType STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = -;
const StructureType STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002;
const StructureType STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003;
const StructureType STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000;
const StructureType STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001;
const StructureType STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002;
const StructureType STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004;
const StructureType STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000;
const StructureType STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002;
const StructureType STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004;
const StructureType STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000;
const StructureType STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001;
const StructureType STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000;
const StructureType STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001;
const StructureType STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000;
const StructureType STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000;
const StructureType STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = -;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52;
const StructureType STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000;
const StructureType STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000;
const StructureType STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001;
const StructureType STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002;
const StructureType STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003;
const StructureType STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004;
const StructureType STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005;
const StructureType STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000;
const StructureType STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000;
const StructureType STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000;
const StructureType STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000;
const StructureType STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001;
const StructureType STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002;
const StructureType STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000;
const StructureType STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001;
const StructureType STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001;
const StructureType STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002;
const StructureType STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003;
const StructureType STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004;
const StructureType STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000;
const StructureType STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001;
const StructureType STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002;
const StructureType STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003;
const StructureType STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54;
const StructureType STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000;
const StructureType STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001;
const StructureType STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000;
const StructureType STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000;
const StructureType STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001;
const StructureType STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002;
const StructureType STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003;
const StructureType STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004;
const StructureType STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005;
const StructureType STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000;
const StructureType STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000;
const StructureType STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001;
const StructureType STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002;
const StructureType STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003;
const StructureType STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004;
const StructureType STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005;
const StructureType STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006;
const StructureType STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007;
const StructureType STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008;
const StructureType STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009;
const StructureType STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000;
const StructureType STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001;
const StructureType STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002;
const StructureType STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000;
const StructureType STRUCTURE_TYPE_RENDERING_INFO = 1000044000;
const StructureType STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001;
const StructureType STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003;
const StructureType STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001;
const StructureType STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000;
const StructureType STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001;
const StructureType STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002;
const StructureType STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003;

distinct SubpassContents = inline uint;
const SubpassContents SUBPASS_CONTENTS_INLINE = 0;
const SubpassContents SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1;

distinct Result = inline int;
const Result SUCCESS = 0;
const Result NOT_READY = 1;
const Result TIMEOUT = 2;
const Result EVENT_SET = 3;
const Result EVENT_RESET = 4;
const Result INCOMPLETE = 5;
const Result ERROR_OUT_OF_HOST_MEMORY = -1;
const Result ERROR_OUT_OF_DEVICE_MEMORY = -2;
const Result ERROR_INITIALIZATION_FAILED = -3;
const Result ERROR_DEVICE_LOST = -4;
const Result ERROR_MEMORY_MAP_FAILED = -5;
const Result ERROR_LAYER_NOT_PRESENT = -6;
const Result ERROR_EXTENSION_NOT_PRESENT = -7;
const Result ERROR_FEATURE_NOT_PRESENT = -8;
const Result ERROR_INCOMPATIBLE_DRIVER = -9;
const Result ERROR_TOO_MANY_OBJECTS = -10;
const Result ERROR_FORMAT_NOT_SUPPORTED = -11;
const Result ERROR_FRAGMENTED_POOL = -12;
const Result ERROR_UNKNOWN = -13;
const Result ERROR_OUT_OF_POOL_MEMORY = -1000069000;
const Result ERROR_INVALID_EXTERNAL_HANDLE = -1000072003;
const Result ERROR_FRAGMENTATION = -1000161000;
const Result ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000;
const Result PIPELINE_COMPILE_REQUIRED = 1000297000;
const Result ERROR_SURFACE_LOST_KHR = -;
const Result ERROR_NATIVE_WINDOW_IN_USE_KHR = -;

distinct DynamicState = inline uint;
const DynamicState DYNAMIC_STATE_VIEWPORT = 0;
const DynamicState DYNAMIC_STATE_SCISSOR = 1;
const DynamicState DYNAMIC_STATE_LINE_WIDTH = 2;
const DynamicState DYNAMIC_STATE_DEPTH_BIAS = 3;
const DynamicState DYNAMIC_STATE_BLEND_CONSTANTS = 4;
const DynamicState DYNAMIC_STATE_DEPTH_BOUNDS = 5;
const DynamicState DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6;
const DynamicState DYNAMIC_STATE_STENCIL_WRITE_MASK = 7;
const DynamicState DYNAMIC_STATE_STENCIL_REFERENCE = 8;
const DynamicState DYNAMIC_STATE_CULL_MODE = 1000267000;
const DynamicState DYNAMIC_STATE_FRONT_FACE = 1000267001;
const DynamicState DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002;
const DynamicState DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003;
const DynamicState DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004;
const DynamicState DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005;
const DynamicState DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006;
const DynamicState DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007;
const DynamicState DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008;
const DynamicState DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009;
const DynamicState DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010;
const DynamicState DYNAMIC_STATE_STENCIL_OP = 1000267011;
const DynamicState DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001;
const DynamicState DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002;
const DynamicState DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004;

distinct DescriptorUpdateTemplateType = inline uint;
const DescriptorUpdateTemplateType DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0;

distinct ObjectType = inline uint;
const ObjectType OBJECT_TYPE_UNKNOWN = 0;
const ObjectType OBJECT_TYPE_INSTANCE = 1;
const ObjectType OBJECT_TYPE_PHYSICAL_DEVICE = 2;
const ObjectType OBJECT_TYPE_DEVICE = 3;
const ObjectType OBJECT_TYPE_QUEUE = 4;
const ObjectType OBJECT_TYPE_SEMAPHORE = 5;
const ObjectType OBJECT_TYPE_COMMAND_BUFFER = 6;
const ObjectType OBJECT_TYPE_FENCE = 7;
const ObjectType OBJECT_TYPE_DEVICE_MEMORY = 8;
const ObjectType OBJECT_TYPE_BUFFER = 9;
const ObjectType OBJECT_TYPE_IMAGE = 10;
const ObjectType OBJECT_TYPE_EVENT = 11;
const ObjectType OBJECT_TYPE_QUERY_POOL = 12;
const ObjectType OBJECT_TYPE_BUFFER_VIEW = 13;
const ObjectType OBJECT_TYPE_IMAGE_VIEW = 14;
const ObjectType OBJECT_TYPE_SHADER_MODULE = 15;
const ObjectType OBJECT_TYPE_PIPELINE_CACHE = 16;
const ObjectType OBJECT_TYPE_PIPELINE_LAYOUT = 17;
const ObjectType OBJECT_TYPE_RENDER_PASS = 18;
const ObjectType OBJECT_TYPE_PIPELINE = 19;
const ObjectType OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20;
const ObjectType OBJECT_TYPE_SAMPLER = 21;
const ObjectType OBJECT_TYPE_DESCRIPTOR_POOL = 22;
const ObjectType OBJECT_TYPE_DESCRIPTOR_SET = 23;
const ObjectType OBJECT_TYPE_FRAMEBUFFER = 24;
const ObjectType OBJECT_TYPE_COMMAND_POOL = 25;
const ObjectType OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000;
const ObjectType OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000;
const ObjectType OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000;
const ObjectType OBJECT_TYPE_SURFACE_KHR = -;

distinct RayTracingInvocationReorderModeNV = inline uint;
const RayTracingInvocationReorderModeNV RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0;
const RayTracingInvocationReorderModeNV RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1;

distinct DirectDriverLoadingModeLUNARG = inline uint;
const DirectDriverLoadingModeLUNARG DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0;
const DirectDriverLoadingModeLUNARG DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1;

distinct AntiLagModeAMD = inline uint;
const AntiLagModeAMD ANTI_LAG_MODE_DRIVER_CONTROL_AMD = 0;
const AntiLagModeAMD ANTI_LAG_MODE_ON_AMD = 1;
const AntiLagModeAMD ANTI_LAG_MODE_OFF_AMD = 2;

distinct AntiLagStageAMD = inline uint;
const AntiLagStageAMD ANTI_LAG_STAGE_INPUT_AMD = 0;
const AntiLagStageAMD ANTI_LAG_STAGE_PRESENT_AMD = 1;

distinct QueueFlagBits = inline uint;
const QueueFlagBits QUEUE_GRAPHICS_BIT = 0x00000001;
const QueueFlagBits QUEUE_COMPUTE_BIT = 0x00000002;
const QueueFlagBits QUEUE_TRANSFER_BIT = 0x00000004;
const QueueFlagBits QUEUE_SPARSE_BINDING_BIT = 0x00000008;
const QueueFlagBits QUEUE_PROTECTED_BIT = 0x00000010;

distinct CullModeFlagBits = inline uint;
const CullModeFlagBits CULL_MODE_NONE = 0;
const CullModeFlagBits CULL_MODE_FRONT_BIT = 0x00000001;
const CullModeFlagBits CULL_MODE_BACK_BIT = 0x00000002;
const CullModeFlagBits CULL_MODE_FRONT_AND_BACK = 0x00000003;

distinct MemoryPropertyFlagBits = inline uint;
const MemoryPropertyFlagBits MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001;
const MemoryPropertyFlagBits MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002;
const MemoryPropertyFlagBits MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004;
const MemoryPropertyFlagBits MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008;
const MemoryPropertyFlagBits MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010;
const MemoryPropertyFlagBits MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020;

distinct MemoryHeapFlagBits = inline uint;
const MemoryHeapFlagBits MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001;
const MemoryHeapFlagBits MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002;

distinct AccessFlagBits = inline uint;
const AccessFlagBits ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001;
const AccessFlagBits ACCESS_INDEX_READ_BIT = 0x00000002;
const AccessFlagBits ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004;
const AccessFlagBits ACCESS_UNIFORM_READ_BIT = 0x00000008;
const AccessFlagBits ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010;
const AccessFlagBits ACCESS_SHADER_READ_BIT = 0x00000020;
const AccessFlagBits ACCESS_SHADER_WRITE_BIT = 0x00000040;
const AccessFlagBits ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080;
const AccessFlagBits ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100;
const AccessFlagBits ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200;
const AccessFlagBits ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400;
const AccessFlagBits ACCESS_TRANSFER_READ_BIT = 0x00000800;
const AccessFlagBits ACCESS_TRANSFER_WRITE_BIT = 0x00001000;
const AccessFlagBits ACCESS_HOST_READ_BIT = 0x00002000;
const AccessFlagBits ACCESS_HOST_WRITE_BIT = 0x00004000;
const AccessFlagBits ACCESS_MEMORY_READ_BIT = 0x00008000;
const AccessFlagBits ACCESS_MEMORY_WRITE_BIT = 0x00010000;
const AccessFlagBits ACCESS_NONE = 0;

distinct BufferUsageFlagBits = inline uint;
const BufferUsageFlagBits BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001;
const BufferUsageFlagBits BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002;
const BufferUsageFlagBits BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004;
const BufferUsageFlagBits BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008;
const BufferUsageFlagBits BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010;
const BufferUsageFlagBits BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020;
const BufferUsageFlagBits BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040;
const BufferUsageFlagBits BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080;
const BufferUsageFlagBits BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100;
const BufferUsageFlagBits BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000;

distinct BufferUsageFlagBits2KHR = inline uint;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR = 0x00000001;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR = 0x00000002;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 0x00000004;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 0x00000008;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR = 0x00000010;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR = 0x00000020;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR = 0x00000040;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR = 0x00000080;
const BufferUsageFlagBits2KHR BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR = 0x00000100;

distinct BufferCreateFlagBits = inline uint;
const BufferCreateFlagBits BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001;
const BufferCreateFlagBits BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002;
const BufferCreateFlagBits BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004;
const BufferCreateFlagBits BUFFER_CREATE_PROTECTED_BIT = 0x00000008;
const BufferCreateFlagBits BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000010;

distinct ShaderStageFlagBits = inline uint;
const ShaderStageFlagBits SHADER_STAGE_VERTEX_BIT = 0x00000001;
const ShaderStageFlagBits SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002;
const ShaderStageFlagBits SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004;
const ShaderStageFlagBits SHADER_STAGE_GEOMETRY_BIT = 0x00000008;
const ShaderStageFlagBits SHADER_STAGE_FRAGMENT_BIT = 0x00000010;
const ShaderStageFlagBits SHADER_STAGE_COMPUTE_BIT = 0x00000020;
const ShaderStageFlagBits SHADER_STAGE_ALL_GRAPHICS = 0x0000001F;
const ShaderStageFlagBits SHADER_STAGE_ALL = 0x7FFFFFFF;

distinct ImageUsageFlagBits = inline uint;
const ImageUsageFlagBits IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001;
const ImageUsageFlagBits IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002;
const ImageUsageFlagBits IMAGE_USAGE_SAMPLED_BIT = 0x00000004;
const ImageUsageFlagBits IMAGE_USAGE_STORAGE_BIT = 0x00000008;
const ImageUsageFlagBits IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010;
const ImageUsageFlagBits IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020;
const ImageUsageFlagBits IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040;
const ImageUsageFlagBits IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080;

distinct ImageCreateFlagBits = inline uint;
const ImageCreateFlagBits IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001;
const ImageCreateFlagBits IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002;
const ImageCreateFlagBits IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004;
const ImageCreateFlagBits IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008;
const ImageCreateFlagBits IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010;
const ImageCreateFlagBits IMAGE_CREATE_ALIAS_BIT = 0x00000400;
const ImageCreateFlagBits IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040;
const ImageCreateFlagBits IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020;
const ImageCreateFlagBits IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080;
const ImageCreateFlagBits IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100;
const ImageCreateFlagBits IMAGE_CREATE_PROTECTED_BIT = 0x00000800;
const ImageCreateFlagBits IMAGE_CREATE_DISJOINT_BIT = 0x00000200;

distinct PipelineCreateFlagBits = inline uint;
const PipelineCreateFlagBits PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001;
const PipelineCreateFlagBits PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002;
const PipelineCreateFlagBits PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004;
const PipelineCreateFlagBits PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008;
const PipelineCreateFlagBits PIPELINE_CREATE_DISPATCH_BASE_BIT = 0x00000010;
const PipelineCreateFlagBits PIPELINE_CREATE_DISPATCH_BASE = -;
const PipelineCreateFlagBits PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 0x00000100;
const PipelineCreateFlagBits PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 0x00000200;

distinct PipelineCreateFlagBits2KHR = inline uint;
const PipelineCreateFlagBits2KHR PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR = 0x00000001;
const PipelineCreateFlagBits2KHR PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR = 0x00000002;
const PipelineCreateFlagBits2KHR PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR = 0x00000004;

distinct ColorComponentFlagBits = inline uint;
const ColorComponentFlagBits COLOR_COMPONENT_R_BIT = 0x00000001;
const ColorComponentFlagBits COLOR_COMPONENT_G_BIT = 0x00000002;
const ColorComponentFlagBits COLOR_COMPONENT_B_BIT = 0x00000004;
const ColorComponentFlagBits COLOR_COMPONENT_A_BIT = 0x00000008;

distinct FenceCreateFlagBits = inline uint;
const FenceCreateFlagBits FENCE_CREATE_SIGNALED_BIT = 0x00000001;

distinct FormatFeatureFlagBits = inline uint;
const FormatFeatureFlagBits FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001;
const FormatFeatureFlagBits FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002;
const FormatFeatureFlagBits FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004;
const FormatFeatureFlagBits FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008;
const FormatFeatureFlagBits FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010;
const FormatFeatureFlagBits FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020;
const FormatFeatureFlagBits FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040;
const FormatFeatureFlagBits FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080;
const FormatFeatureFlagBits FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100;
const FormatFeatureFlagBits FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200;
const FormatFeatureFlagBits FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400;
const FormatFeatureFlagBits FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800;
const FormatFeatureFlagBits FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000;
const FormatFeatureFlagBits FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000;
const FormatFeatureFlagBits FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000;
const FormatFeatureFlagBits FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000;
const FormatFeatureFlagBits FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000;
const FormatFeatureFlagBits FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000;
const FormatFeatureFlagBits FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000;
const FormatFeatureFlagBits FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000;
const FormatFeatureFlagBits FORMAT_FEATURE_DISJOINT_BIT = 0x00400000;
const FormatFeatureFlagBits FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000;
const FormatFeatureFlagBits FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000;

distinct QueryControlFlagBits = inline uint;
const QueryControlFlagBits QUERY_CONTROL_PRECISE_BIT = 0x00000001;

distinct QueryResultFlagBits = inline uint;
const QueryResultFlagBits QUERY_RESULT_64_BIT = 0x00000001;
const QueryResultFlagBits QUERY_RESULT_WAIT_BIT = 0x00000002;
const QueryResultFlagBits QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004;
const QueryResultFlagBits QUERY_RESULT_PARTIAL_BIT = 0x00000008;

distinct CommandBufferUsageFlagBits = inline uint;
const CommandBufferUsageFlagBits COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001;
const CommandBufferUsageFlagBits COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002;
const CommandBufferUsageFlagBits COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004;

distinct QueryPipelineStatisticFlagBits = inline uint;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200;
const QueryPipelineStatisticFlagBits QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400;

distinct ImageAspectFlagBits = inline uint;
const ImageAspectFlagBits IMAGE_ASPECT_COLOR_BIT = 0x00000001;
const ImageAspectFlagBits IMAGE_ASPECT_DEPTH_BIT = 0x00000002;
const ImageAspectFlagBits IMAGE_ASPECT_STENCIL_BIT = 0x00000004;
const ImageAspectFlagBits IMAGE_ASPECT_METADATA_BIT = 0x00000008;
const ImageAspectFlagBits IMAGE_ASPECT_PLANE_0_BIT = 0x00000010;
const ImageAspectFlagBits IMAGE_ASPECT_PLANE_1_BIT = 0x00000020;
const ImageAspectFlagBits IMAGE_ASPECT_PLANE_2_BIT = 0x00000040;
const ImageAspectFlagBits IMAGE_ASPECT_NONE = 0;

distinct SparseImageFormatFlagBits = inline uint;
const SparseImageFormatFlagBits SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001;
const SparseImageFormatFlagBits SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002;
const SparseImageFormatFlagBits SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004;

distinct SparseMemoryBindFlagBits = inline uint;
const SparseMemoryBindFlagBits SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001;

distinct PipelineStageFlagBits = inline uint;
const PipelineStageFlagBits PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001;
const PipelineStageFlagBits PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002;
const PipelineStageFlagBits PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004;
const PipelineStageFlagBits PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008;
const PipelineStageFlagBits PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010;
const PipelineStageFlagBits PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020;
const PipelineStageFlagBits PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040;
const PipelineStageFlagBits PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080;
const PipelineStageFlagBits PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100;
const PipelineStageFlagBits PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200;
const PipelineStageFlagBits PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400;
const PipelineStageFlagBits PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800;
const PipelineStageFlagBits PIPELINE_STAGE_TRANSFER_BIT = 0x00001000;
const PipelineStageFlagBits PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000;
const PipelineStageFlagBits PIPELINE_STAGE_HOST_BIT = 0x00004000;
const PipelineStageFlagBits PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000;
const PipelineStageFlagBits PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000;
const PipelineStageFlagBits PIPELINE_STAGE_NONE = 0;

distinct CommandPoolCreateFlagBits = inline uint;
const CommandPoolCreateFlagBits COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001;
const CommandPoolCreateFlagBits COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002;
const CommandPoolCreateFlagBits COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004;

distinct CommandPoolResetFlagBits = inline uint;
const CommandPoolResetFlagBits COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001;

distinct CommandBufferResetFlagBits = inline uint;
const CommandBufferResetFlagBits COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001;

distinct SampleCountFlagBits = inline uint;
const SampleCountFlagBits SAMPLE_COUNT_1_BIT = 0x00000001;
const SampleCountFlagBits SAMPLE_COUNT_2_BIT = 0x00000002;
const SampleCountFlagBits SAMPLE_COUNT_4_BIT = 0x00000004;
const SampleCountFlagBits SAMPLE_COUNT_8_BIT = 0x00000008;
const SampleCountFlagBits SAMPLE_COUNT_16_BIT = 0x00000010;
const SampleCountFlagBits SAMPLE_COUNT_32_BIT = 0x00000020;
const SampleCountFlagBits SAMPLE_COUNT_64_BIT = 0x00000040;

distinct AttachmentDescriptionFlagBits = inline uint;
const AttachmentDescriptionFlagBits ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001;

distinct StencilFaceFlagBits = inline uint;
const StencilFaceFlagBits STENCIL_FACE_FRONT_BIT = 0x00000001;
const StencilFaceFlagBits STENCIL_FACE_BACK_BIT = 0x00000002;
const StencilFaceFlagBits STENCIL_FACE_FRONT_AND_BACK = 0x00000003;

distinct DescriptorPoolCreateFlagBits = inline uint;
const DescriptorPoolCreateFlagBits DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001;
const DescriptorPoolCreateFlagBits DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 0x00000002;

distinct DependencyFlagBits = inline uint;
const DependencyFlagBits DEPENDENCY_BY_REGION_BIT = 0x00000001;
const DependencyFlagBits DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004;
const DependencyFlagBits DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002;

distinct SemaphoreType = inline uint;
const SemaphoreType SEMAPHORE_TYPE_BINARY = 0;
const SemaphoreType SEMAPHORE_TYPE_TIMELINE = 1;

distinct SemaphoreWaitFlagBits = inline uint;
const SemaphoreWaitFlagBits SEMAPHORE_WAIT_ANY_BIT = 0x00000001;

distinct PresentModeKHR = inline uint;
const PresentModeKHR PRESENT_MODE_IMMEDIATE_KHR = 0;
const PresentModeKHR PRESENT_MODE_MAILBOX_KHR = 1;
const PresentModeKHR PRESENT_MODE_FIFO_KHR = 2;
const PresentModeKHR PRESENT_MODE_FIFO_RELAXED_KHR = 3;

distinct ColorSpaceKHR = inline uint;
const ColorSpaceKHR COLOR_SPACE_SRGB_NONLINEAR_KHR = 0;

distinct DisplayPlaneAlphaFlagBitsKHR = inline uint;
const DisplayPlaneAlphaFlagBitsKHR DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001;
const DisplayPlaneAlphaFlagBitsKHR DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002;
const DisplayPlaneAlphaFlagBitsKHR DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004;
const DisplayPlaneAlphaFlagBitsKHR DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008;

distinct CompositeAlphaFlagBitsKHR = inline uint;
const CompositeAlphaFlagBitsKHR COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001;
const CompositeAlphaFlagBitsKHR COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002;
const CompositeAlphaFlagBitsKHR COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004;
const CompositeAlphaFlagBitsKHR COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008;

distinct SurfaceTransformFlagBitsKHR = inline uint;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080;
const SurfaceTransformFlagBitsKHR SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100;

distinct SwapchainImageUsageFlagBitsANDROID = inline uint;
const SwapchainImageUsageFlagBitsANDROID SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID = 0x00000001;

distinct TimeDomainKHR = inline uint;
const TimeDomainKHR TIME_DOMAIN_DEVICE_KHR = 0;
const TimeDomainKHR TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1;
const TimeDomainKHR TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2;
const TimeDomainKHR TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3;

distinct DebugReportFlagBitsEXT = inline uint;
const DebugReportFlagBitsEXT DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001;
const DebugReportFlagBitsEXT DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002;
const DebugReportFlagBitsEXT DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004;
const DebugReportFlagBitsEXT DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008;
const DebugReportFlagBitsEXT DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010;

distinct DebugReportObjectTypeEXT = inline uint;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30;
const DebugReportObjectTypeEXT DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33;

distinct DeviceMemoryReportEventTypeEXT = inline uint;
const DeviceMemoryReportEventTypeEXT DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0;
const DeviceMemoryReportEventTypeEXT DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1;
const DeviceMemoryReportEventTypeEXT DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2;
const DeviceMemoryReportEventTypeEXT DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3;
const DeviceMemoryReportEventTypeEXT DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4;

distinct RasterizationOrderAMD = inline uint;
const RasterizationOrderAMD RASTERIZATION_ORDER_STRICT_AMD = 0;
const RasterizationOrderAMD RASTERIZATION_ORDER_RELAXED_AMD = 1;

distinct ExternalMemoryHandleTypeFlagBitsNV = inline uint;
const ExternalMemoryHandleTypeFlagBitsNV EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001;
const ExternalMemoryHandleTypeFlagBitsNV EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002;
const ExternalMemoryHandleTypeFlagBitsNV EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004;
const ExternalMemoryHandleTypeFlagBitsNV EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008;

distinct ExternalMemoryFeatureFlagBitsNV = inline uint;
const ExternalMemoryFeatureFlagBitsNV EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001;
const ExternalMemoryFeatureFlagBitsNV EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002;
const ExternalMemoryFeatureFlagBitsNV EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004;

distinct ValidationCheckEXT = inline uint;
const ValidationCheckEXT VALIDATION_CHECK_ALL_EXT = 0;
const ValidationCheckEXT VALIDATION_CHECK_SHADERS_EXT = 1;

distinct ValidationFeatureEnableEXT = inline uint;
const ValidationFeatureEnableEXT VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0;
const ValidationFeatureEnableEXT VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1;
const ValidationFeatureEnableEXT VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2;
const ValidationFeatureEnableEXT VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3;
const ValidationFeatureEnableEXT VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4;

distinct ValidationFeatureDisableEXT = inline uint;
const ValidationFeatureDisableEXT VALIDATION_FEATURE_DISABLE_ALL_EXT = 0;
const ValidationFeatureDisableEXT VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1;
const ValidationFeatureDisableEXT VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2;
const ValidationFeatureDisableEXT VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3;
const ValidationFeatureDisableEXT VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4;
const ValidationFeatureDisableEXT VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5;
const ValidationFeatureDisableEXT VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6;
const ValidationFeatureDisableEXT VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7;

distinct LayerSettingTypeEXT = inline uint;
const LayerSettingTypeEXT LAYER_SETTING_TYPE_BOOL32_EXT = 0;
const LayerSettingTypeEXT LAYER_SETTING_TYPE_INT32_EXT = 1;
const LayerSettingTypeEXT LAYER_SETTING_TYPE_INT64_EXT = 2;
const LayerSettingTypeEXT LAYER_SETTING_TYPE_UINT32_EXT = 3;
const LayerSettingTypeEXT LAYER_SETTING_TYPE_UINT64_EXT = 4;
const LayerSettingTypeEXT LAYER_SETTING_TYPE_FLOAT32_EXT = 5;
const LayerSettingTypeEXT LAYER_SETTING_TYPE_FLOAT64_EXT = 6;
const LayerSettingTypeEXT LAYER_SETTING_TYPE_STRING_EXT = 7;

distinct SubgroupFeatureFlagBits = inline uint;
const SubgroupFeatureFlagBits SUBGROUP_FEATURE_BASIC_BIT = 0x00000001;
const SubgroupFeatureFlagBits SUBGROUP_FEATURE_VOTE_BIT = 0x00000002;
const SubgroupFeatureFlagBits SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004;
const SubgroupFeatureFlagBits SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008;
const SubgroupFeatureFlagBits SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010;
const SubgroupFeatureFlagBits SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020;
const SubgroupFeatureFlagBits SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040;
const SubgroupFeatureFlagBits SUBGROUP_FEATURE_QUAD_BIT = 0x00000080;

distinct IndirectCommandsLayoutUsageFlagBitsNV = inline uint;
const IndirectCommandsLayoutUsageFlagBitsNV INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001;
const IndirectCommandsLayoutUsageFlagBitsNV INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 0x00000002;
const IndirectCommandsLayoutUsageFlagBitsNV INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004;

distinct IndirectStateFlagBitsNV = inline uint;
const IndirectStateFlagBitsNV INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001;

distinct IndirectCommandsTokenTypeNV = inline uint;
const IndirectCommandsTokenTypeNV INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0;
const IndirectCommandsTokenTypeNV INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1;
const IndirectCommandsTokenTypeNV INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2;
const IndirectCommandsTokenTypeNV INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3;
const IndirectCommandsTokenTypeNV INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4;
const IndirectCommandsTokenTypeNV INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5;
const IndirectCommandsTokenTypeNV INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6;
const IndirectCommandsTokenTypeNV INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7;

distinct ExternalMemoryHandleTypeFlagBits = inline uint;
const ExternalMemoryHandleTypeFlagBits EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
const ExternalMemoryHandleTypeFlagBits EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
const ExternalMemoryHandleTypeFlagBits EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
const ExternalMemoryHandleTypeFlagBits EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008;
const ExternalMemoryHandleTypeFlagBits EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010;
const ExternalMemoryHandleTypeFlagBits EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020;
const ExternalMemoryHandleTypeFlagBits EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040;

distinct ExternalMemoryFeatureFlagBits = inline uint;
const ExternalMemoryFeatureFlagBits EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001;
const ExternalMemoryFeatureFlagBits EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002;
const ExternalMemoryFeatureFlagBits EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004;

distinct ExternalSemaphoreHandleTypeFlagBits = inline uint;
const ExternalSemaphoreHandleTypeFlagBits EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
const ExternalSemaphoreHandleTypeFlagBits EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
const ExternalSemaphoreHandleTypeFlagBits EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
const ExternalSemaphoreHandleTypeFlagBits EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008;
const ExternalSemaphoreHandleTypeFlagBits EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010;

distinct ExternalSemaphoreFeatureFlagBits = inline uint;
const ExternalSemaphoreFeatureFlagBits EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001;
const ExternalSemaphoreFeatureFlagBits EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002;

distinct SemaphoreImportFlagBits = inline uint;
const SemaphoreImportFlagBits SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001;

distinct ExternalFenceHandleTypeFlagBits = inline uint;
const ExternalFenceHandleTypeFlagBits EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
const ExternalFenceHandleTypeFlagBits EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
const ExternalFenceHandleTypeFlagBits EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
const ExternalFenceHandleTypeFlagBits EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008;

distinct ExternalFenceFeatureFlagBits = inline uint;
const ExternalFenceFeatureFlagBits EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001;
const ExternalFenceFeatureFlagBits EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002;

distinct FenceImportFlagBits = inline uint;
const FenceImportFlagBits FENCE_IMPORT_TEMPORARY_BIT = 0x00000001;

distinct SurfaceCounterFlagBitsEXT = inline uint;
const SurfaceCounterFlagBitsEXT SURFACE_COUNTER_VBLANK_BIT_EXT = 0x00000001;

distinct DisplayPowerStateEXT = inline uint;
const DisplayPowerStateEXT DISPLAY_POWER_STATE_OFF_EXT = 0;
const DisplayPowerStateEXT DISPLAY_POWER_STATE_SUSPEND_EXT = 1;
const DisplayPowerStateEXT DISPLAY_POWER_STATE_ON_EXT = 2;

distinct DeviceEventTypeEXT = inline uint;
const DeviceEventTypeEXT DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0;

distinct DisplayEventTypeEXT = inline uint;
const DisplayEventTypeEXT DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0;

distinct PeerMemoryFeatureFlagBits = inline uint;
const PeerMemoryFeatureFlagBits PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001;
const PeerMemoryFeatureFlagBits PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002;
const PeerMemoryFeatureFlagBits PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004;
const PeerMemoryFeatureFlagBits PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008;

distinct MemoryAllocateFlagBits = inline uint;
const MemoryAllocateFlagBits MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001;
const MemoryAllocateFlagBits MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 0x00000002;
const MemoryAllocateFlagBits MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000004;

distinct DeviceGroupPresentModeFlagBitsKHR = inline uint;
const DeviceGroupPresentModeFlagBitsKHR DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001;
const DeviceGroupPresentModeFlagBitsKHR DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002;
const DeviceGroupPresentModeFlagBitsKHR DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004;
const DeviceGroupPresentModeFlagBitsKHR DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008;

distinct ViewportCoordinateSwizzleNV = inline uint;
const ViewportCoordinateSwizzleNV VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0;
const ViewportCoordinateSwizzleNV VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1;
const ViewportCoordinateSwizzleNV VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2;
const ViewportCoordinateSwizzleNV VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3;
const ViewportCoordinateSwizzleNV VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4;
const ViewportCoordinateSwizzleNV VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5;
const ViewportCoordinateSwizzleNV VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6;
const ViewportCoordinateSwizzleNV VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7;

distinct DiscardRectangleModeEXT = inline uint;
const DiscardRectangleModeEXT DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0;
const DiscardRectangleModeEXT DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1;

distinct PointClippingBehavior = inline uint;
const PointClippingBehavior POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0;
const PointClippingBehavior POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1;

distinct SamplerReductionMode = inline uint;
const SamplerReductionMode SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0;
const SamplerReductionMode SAMPLER_REDUCTION_MODE_MIN = 1;
const SamplerReductionMode SAMPLER_REDUCTION_MODE_MAX = 2;

distinct TessellationDomainOrigin = inline uint;
const TessellationDomainOrigin TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0;
const TessellationDomainOrigin TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1;

distinct SamplerYcbcrModelConversion = inline uint;
const SamplerYcbcrModelConversion SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0;
const SamplerYcbcrModelConversion SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1;
const SamplerYcbcrModelConversion SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2;
const SamplerYcbcrModelConversion SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3;
const SamplerYcbcrModelConversion SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4;

distinct SamplerYcbcrRange = inline uint;
const SamplerYcbcrRange SAMPLER_YCBCR_RANGE_ITU_FULL = 0;
const SamplerYcbcrRange SAMPLER_YCBCR_RANGE_ITU_NARROW = 1;

distinct ChromaLocation = inline uint;
const ChromaLocation CHROMA_LOCATION_COSITED_EVEN = 0;
const ChromaLocation CHROMA_LOCATION_MIDPOINT = 1;

distinct BlendOverlapEXT = inline uint;
const BlendOverlapEXT BLEND_OVERLAP_UNCORRELATED_EXT = 0;
const BlendOverlapEXT BLEND_OVERLAP_DISJOINT_EXT = 1;
const BlendOverlapEXT BLEND_OVERLAP_CONJOINT_EXT = 2;

distinct CoverageModulationModeNV = inline uint;
const CoverageModulationModeNV COVERAGE_MODULATION_MODE_NONE_NV = 0;
const CoverageModulationModeNV COVERAGE_MODULATION_MODE_RGB_NV = 1;
const CoverageModulationModeNV COVERAGE_MODULATION_MODE_ALPHA_NV = 2;
const CoverageModulationModeNV COVERAGE_MODULATION_MODE_RGBA_NV = 3;

distinct CoverageReductionModeNV = inline uint;
const CoverageReductionModeNV COVERAGE_REDUCTION_MODE_MERGE_NV = 0;
const CoverageReductionModeNV COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1;

distinct ValidationCacheHeaderVersionEXT = inline uint;
const ValidationCacheHeaderVersionEXT VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1;

distinct ShaderInfoTypeAMD = inline uint;
const ShaderInfoTypeAMD SHADER_INFO_TYPE_STATISTICS_AMD = 0;
const ShaderInfoTypeAMD SHADER_INFO_TYPE_BINARY_AMD = 1;
const ShaderInfoTypeAMD SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2;

distinct QueueGlobalPriorityKHR = inline uint;
const QueueGlobalPriorityKHR QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128;
const QueueGlobalPriorityKHR QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256;
const QueueGlobalPriorityKHR QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512;
const QueueGlobalPriorityKHR QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024;

distinct DebugUtilsMessageSeverityFlagBitsEXT = inline uint;
const DebugUtilsMessageSeverityFlagBitsEXT DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001;
const DebugUtilsMessageSeverityFlagBitsEXT DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010;
const DebugUtilsMessageSeverityFlagBitsEXT DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100;
const DebugUtilsMessageSeverityFlagBitsEXT DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000;

distinct DebugUtilsMessageTypeFlagBitsEXT = inline uint;
const DebugUtilsMessageTypeFlagBitsEXT DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001;
const DebugUtilsMessageTypeFlagBitsEXT DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002;
const DebugUtilsMessageTypeFlagBitsEXT DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004;

distinct ConservativeRasterizationModeEXT = inline uint;
const ConservativeRasterizationModeEXT CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0;
const ConservativeRasterizationModeEXT CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1;
const ConservativeRasterizationModeEXT CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2;

distinct DescriptorBindingFlagBits = inline uint;
const DescriptorBindingFlagBits DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 0x00000001;
const DescriptorBindingFlagBits DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 0x00000002;
const DescriptorBindingFlagBits DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 0x00000004;
const DescriptorBindingFlagBits DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 0x00000008;

distinct VendorId = inline uint;
const VendorId VENDOR_ID_KHRONOS = 0x10000;
const VendorId VENDOR_ID_VIV = 0x10001;
const VendorId VENDOR_ID_VSI = 0x10002;
const VendorId VENDOR_ID_KAZAN = 0x10003;
const VendorId VENDOR_ID_CODEPLAY = 0x10004;
const VendorId VENDOR_ID_MESA = 0x10005;
const VendorId VENDOR_ID_POCL = 0x10006;
const VendorId VENDOR_ID_MOBILEYE = 0x10007;

distinct DriverId = inline uint;
const DriverId DRIVER_ID_AMD_PROPRIETARY = 1;
const DriverId DRIVER_ID_AMD_OPEN_SOURCE = 2;
const DriverId DRIVER_ID_MESA_RADV = 3;
const DriverId DRIVER_ID_NVIDIA_PROPRIETARY = 4;
const DriverId DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5;
const DriverId DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6;
const DriverId DRIVER_ID_IMAGINATION_PROPRIETARY = 7;
const DriverId DRIVER_ID_QUALCOMM_PROPRIETARY = 8;
const DriverId DRIVER_ID_ARM_PROPRIETARY = 9;
const DriverId DRIVER_ID_GOOGLE_SWIFTSHADER = 10;
const DriverId DRIVER_ID_GGP_PROPRIETARY = 11;
const DriverId DRIVER_ID_BROADCOM_PROPRIETARY = 12;
const DriverId DRIVER_ID_MESA_LLVMPIPE = 13;
const DriverId DRIVER_ID_MOLTENVK = 14;
const DriverId DRIVER_ID_COREAVI_PROPRIETARY = 15;
const DriverId DRIVER_ID_JUICE_PROPRIETARY = 16;
const DriverId DRIVER_ID_VERISILICON_PROPRIETARY = 17;
const DriverId DRIVER_ID_MESA_TURNIP = 18;
const DriverId DRIVER_ID_MESA_V3DV = 19;
const DriverId DRIVER_ID_MESA_PANVK = 20;
const DriverId DRIVER_ID_SAMSUNG_PROPRIETARY = 21;
const DriverId DRIVER_ID_MESA_VENUS = 22;
const DriverId DRIVER_ID_MESA_DOZEN = 23;
const DriverId DRIVER_ID_MESA_NVK = 24;
const DriverId DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25;
const DriverId DRIVER_ID_MESA_HONEYKRISP = 26;
const DriverId DRIVER_ID_RESERVED_27 = 27;

distinct ConditionalRenderingFlagBitsEXT = inline uint;
const ConditionalRenderingFlagBitsEXT CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001;

distinct ResolveModeFlagBits = inline uint;
const ResolveModeFlagBits RESOLVE_MODE_NONE = 0;
const ResolveModeFlagBits RESOLVE_MODE_SAMPLE_ZERO_BIT = 0x00000001;
const ResolveModeFlagBits RESOLVE_MODE_AVERAGE_BIT = 0x00000002;
const ResolveModeFlagBits RESOLVE_MODE_MIN_BIT = 0x00000004;
const ResolveModeFlagBits RESOLVE_MODE_MAX_BIT = 0x00000008;

distinct ShadingRatePaletteEntryNV = inline uint;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10;
const ShadingRatePaletteEntryNV SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11;

distinct CoarseSampleOrderTypeNV = inline uint;
const CoarseSampleOrderTypeNV COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0;
const CoarseSampleOrderTypeNV COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1;
const CoarseSampleOrderTypeNV COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2;
const CoarseSampleOrderTypeNV COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3;

distinct GeometryInstanceFlagBitsKHR = inline uint;
const GeometryInstanceFlagBitsKHR GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x00000001;
const GeometryInstanceFlagBitsKHR GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 0x00000002;
const GeometryInstanceFlagBitsKHR GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 0x00000004;
const GeometryInstanceFlagBitsKHR GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 0x00000008;

distinct GeometryFlagBitsKHR = inline uint;
const GeometryFlagBitsKHR GEOMETRY_OPAQUE_BIT_KHR = 0x00000001;
const GeometryFlagBitsKHR GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002;

distinct BuildAccelerationStructureFlagBitsKHR = inline uint;
const BuildAccelerationStructureFlagBitsKHR BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 0x00000001;
const BuildAccelerationStructureFlagBitsKHR BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 0x00000002;
const BuildAccelerationStructureFlagBitsKHR BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004;
const BuildAccelerationStructureFlagBitsKHR BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008;
const BuildAccelerationStructureFlagBitsKHR BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 0x00000010;

distinct AccelerationStructureCreateFlagBitsKHR = inline uint;
const AccelerationStructureCreateFlagBitsKHR ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 0x00000001;

distinct CopyAccelerationStructureModeKHR = inline uint;
const CopyAccelerationStructureModeKHR COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0;
const CopyAccelerationStructureModeKHR COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1;
const CopyAccelerationStructureModeKHR COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2;
const CopyAccelerationStructureModeKHR COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3;

distinct BuildAccelerationStructureModeKHR = inline uint;
const BuildAccelerationStructureModeKHR BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0;
const BuildAccelerationStructureModeKHR BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1;

distinct AccelerationStructureTypeKHR = inline uint;
const AccelerationStructureTypeKHR ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0;
const AccelerationStructureTypeKHR ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1;
const AccelerationStructureTypeKHR ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2;

distinct GeometryTypeKHR = inline uint;
const GeometryTypeKHR GEOMETRY_TYPE_TRIANGLES_KHR = 0;
const GeometryTypeKHR GEOMETRY_TYPE_AABBS_KHR = 1;
const GeometryTypeKHR GEOMETRY_TYPE_INSTANCES_KHR = 2;

distinct AccelerationStructureMemoryRequirementsTypeNV = inline uint;
const AccelerationStructureMemoryRequirementsTypeNV ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0;
const AccelerationStructureMemoryRequirementsTypeNV ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1;
const AccelerationStructureMemoryRequirementsTypeNV ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2;

distinct AccelerationStructureBuildTypeKHR = inline uint;
const AccelerationStructureBuildTypeKHR ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0;
const AccelerationStructureBuildTypeKHR ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1;
const AccelerationStructureBuildTypeKHR ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2;

distinct RayTracingShaderGroupTypeKHR = inline uint;
const RayTracingShaderGroupTypeKHR RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0;
const RayTracingShaderGroupTypeKHR RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1;
const RayTracingShaderGroupTypeKHR RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2;

distinct AccelerationStructureCompatibilityKHR = inline uint;
const AccelerationStructureCompatibilityKHR ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0;
const AccelerationStructureCompatibilityKHR ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1;

distinct ShaderGroupShaderKHR = inline uint;
const ShaderGroupShaderKHR SHADER_GROUP_SHADER_GENERAL_KHR = 0;
const ShaderGroupShaderKHR SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1;
const ShaderGroupShaderKHR SHADER_GROUP_SHADER_ANY_HIT_KHR = 2;
const ShaderGroupShaderKHR SHADER_GROUP_SHADER_INTERSECTION_KHR = 3;

distinct MemoryOverallocationBehaviorAMD = inline uint;
const MemoryOverallocationBehaviorAMD MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0;
const MemoryOverallocationBehaviorAMD MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1;
const MemoryOverallocationBehaviorAMD MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2;

distinct DeviceDiagnosticsConfigFlagBitsNV = inline uint;
const DeviceDiagnosticsConfigFlagBitsNV DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 0x00000001;
const DeviceDiagnosticsConfigFlagBitsNV DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 0x00000002;
const DeviceDiagnosticsConfigFlagBitsNV DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004;
const DeviceDiagnosticsConfigFlagBitsNV DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 0x00000008;

distinct PipelineCreationFeedbackFlagBits = inline uint;
const PipelineCreationFeedbackFlagBits PIPELINE_CREATION_FEEDBACK_VALID_BIT = 0x00000001;
const PipelineCreationFeedbackFlagBits PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 0x00000002;
const PipelineCreationFeedbackFlagBits PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 0x00000004;

distinct FullScreenExclusiveEXT = inline uint;
const FullScreenExclusiveEXT FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0;
const FullScreenExclusiveEXT FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1;
const FullScreenExclusiveEXT FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2;
const FullScreenExclusiveEXT FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3;

distinct PerformanceCounterScopeKHR = inline uint;
const PerformanceCounterScopeKHR PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0;
const PerformanceCounterScopeKHR PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1;
const PerformanceCounterScopeKHR PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2;

distinct MemoryDecompressionMethodFlagBitsNV = inline uint;
const MemoryDecompressionMethodFlagBitsNV MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = 0x00000001;

distinct PerformanceCounterUnitKHR = inline uint;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9;
const PerformanceCounterUnitKHR PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10;

distinct PerformanceCounterStorageKHR = inline uint;
const PerformanceCounterStorageKHR PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0;
const PerformanceCounterStorageKHR PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1;
const PerformanceCounterStorageKHR PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2;
const PerformanceCounterStorageKHR PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3;
const PerformanceCounterStorageKHR PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4;
const PerformanceCounterStorageKHR PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5;

distinct PerformanceCounterDescriptionFlagBitsKHR = inline uint;
const PerformanceCounterDescriptionFlagBitsKHR PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 0x00000001;
const PerformanceCounterDescriptionFlagBitsKHR PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 0x00000002;

distinct PerformanceConfigurationTypeINTEL = inline uint;
const PerformanceConfigurationTypeINTEL PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0;

distinct QueryPoolSamplingModeINTEL = inline uint;
const QueryPoolSamplingModeINTEL QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0;

distinct PerformanceOverrideTypeINTEL = inline uint;
const PerformanceOverrideTypeINTEL PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0;
const PerformanceOverrideTypeINTEL PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1;

distinct PerformanceParameterTypeINTEL = inline uint;
const PerformanceParameterTypeINTEL PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0;
const PerformanceParameterTypeINTEL PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1;

distinct PerformanceValueTypeINTEL = inline uint;
const PerformanceValueTypeINTEL PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0;
const PerformanceValueTypeINTEL PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1;
const PerformanceValueTypeINTEL PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2;
const PerformanceValueTypeINTEL PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3;
const PerformanceValueTypeINTEL PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4;

distinct ShaderFloatControlsIndependence = inline uint;
const ShaderFloatControlsIndependence SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0;
const ShaderFloatControlsIndependence SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1;
const ShaderFloatControlsIndependence SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2;

distinct PipelineExecutableStatisticFormatKHR = inline uint;
const PipelineExecutableStatisticFormatKHR PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0;
const PipelineExecutableStatisticFormatKHR PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1;
const PipelineExecutableStatisticFormatKHR PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2;
const PipelineExecutableStatisticFormatKHR PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3;

distinct LineRasterizationModeKHR = inline uint;
const LineRasterizationModeKHR LINE_RASTERIZATION_MODE_DEFAULT_KHR = 0;
const LineRasterizationModeKHR LINE_RASTERIZATION_MODE_RECTANGULAR_KHR = 1;
const LineRasterizationModeKHR LINE_RASTERIZATION_MODE_BRESENHAM_KHR = 2;
const LineRasterizationModeKHR LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR = 3;

distinct FaultLevel = inline uint;
const FaultLevel FAULT_LEVEL_UNASSIGNED = 0;
const FaultLevel FAULT_LEVEL_CRITICAL = 1;
const FaultLevel FAULT_LEVEL_RECOVERABLE = 2;
const FaultLevel FAULT_LEVEL_WARNING = 3;

distinct FaultType = inline uint;
const FaultType FAULT_TYPE_INVALID = 0;
const FaultType FAULT_TYPE_UNASSIGNED = 1;
const FaultType FAULT_TYPE_IMPLEMENTATION = 2;
const FaultType FAULT_TYPE_SYSTEM = 3;
const FaultType FAULT_TYPE_PHYSICAL_DEVICE = 4;
const FaultType FAULT_TYPE_COMMAND_BUFFER_FULL = 5;
const FaultType FAULT_TYPE_INVALID_API_USAGE = 6;

distinct FaultQueryBehavior = inline uint;
const FaultQueryBehavior FAULT_QUERY_BEHAVIOR_GET_AND_CLEAR_ALL_FAULTS = 0;

distinct ToolPurposeFlagBits = inline uint;
const ToolPurposeFlagBits TOOL_PURPOSE_VALIDATION_BIT = 0x00000001;
const ToolPurposeFlagBits TOOL_PURPOSE_PROFILING_BIT = 0x00000002;
const ToolPurposeFlagBits TOOL_PURPOSE_TRACING_BIT = 0x00000004;
const ToolPurposeFlagBits TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 0x00000008;
const ToolPurposeFlagBits TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 0x00000010;

distinct PipelineMatchControl = inline uint;
const PipelineMatchControl PIPELINE_MATCH_CONTROL_APPLICATION_UUID_EXACT_MATCH = 0;

distinct FragmentShadingRateCombinerOpKHR = inline uint;
const FragmentShadingRateCombinerOpKHR FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0;
const FragmentShadingRateCombinerOpKHR FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1;
const FragmentShadingRateCombinerOpKHR FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2;
const FragmentShadingRateCombinerOpKHR FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3;
const FragmentShadingRateCombinerOpKHR FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4;

distinct FragmentShadingRateNV = inline uint;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14;
const FragmentShadingRateNV FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15;

distinct FragmentShadingRateTypeNV = inline uint;
const FragmentShadingRateTypeNV FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0;
const FragmentShadingRateTypeNV FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1;

distinct SubpassMergeStatusEXT = inline uint;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_MERGED_EXT = 0;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12;
const SubpassMergeStatusEXT SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13;

distinct AccessFlagBits2 = inline uint;
const AccessFlagBits2 ACCESS_2_NONE = 0;
const AccessFlagBits2 ACCESS_2_INDIRECT_COMMAND_READ_BIT = 0x00000001;
const AccessFlagBits2 ACCESS_2_INDEX_READ_BIT = 0x00000002;
const AccessFlagBits2 ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004;
const AccessFlagBits2 ACCESS_2_UNIFORM_READ_BIT = 0x00000008;
const AccessFlagBits2 ACCESS_2_INPUT_ATTACHMENT_READ_BIT = 0x00000010;
const AccessFlagBits2 ACCESS_2_SHADER_READ_BIT = 0x00000020;
const AccessFlagBits2 ACCESS_2_SHADER_WRITE_BIT = 0x00000040;
const AccessFlagBits2 ACCESS_2_COLOR_ATTACHMENT_READ_BIT = 0x00000080;
const AccessFlagBits2 ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100;
const AccessFlagBits2 ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200;
const AccessFlagBits2 ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400;
const AccessFlagBits2 ACCESS_2_TRANSFER_READ_BIT = 0x00000800;
const AccessFlagBits2 ACCESS_2_TRANSFER_WRITE_BIT = 0x00001000;
const AccessFlagBits2 ACCESS_2_HOST_READ_BIT = 0x00002000;
const AccessFlagBits2 ACCESS_2_HOST_WRITE_BIT = 0x00004000;
const AccessFlagBits2 ACCESS_2_MEMORY_READ_BIT = 0x00008000;
const AccessFlagBits2 ACCESS_2_MEMORY_WRITE_BIT = 0x00010000;
const AccessFlagBits2 ACCESS_2_SHADER_SAMPLED_READ_BIT = 0x100000000;
const AccessFlagBits2 ACCESS_2_SHADER_STORAGE_READ_BIT = 0x200000000;
const AccessFlagBits2 ACCESS_2_SHADER_STORAGE_WRITE_BIT = 0x400000000;

distinct PipelineStageFlagBits2 = inline uint;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_NONE = 0;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = 0x00000001;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = 0x00000002;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_VERTEX_INPUT_BIT = 0x00000004;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_VERTEX_SHADER_BIT = 0x00000008;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = 0x00000040;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = 0x00000080;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = 0x00000100;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = 0x00000200;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = 0x00000800;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_ALL_TRANSFER_BIT = 0x00001000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = 0x00002000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_HOST_BIT = 0x00004000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = 0x00008000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_ALL_COMMANDS_BIT = 0x00010000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_COPY_BIT = 0x100000000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_RESOLVE_BIT = 0x200000000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_BLIT_BIT = 0x400000000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_CLEAR_BIT = 0x800000000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_INDEX_INPUT_BIT = 0x1000000000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = 0x2000000000;
const PipelineStageFlagBits2 PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = 0x4000000000;

distinct SubmitFlagBits = inline uint;
const SubmitFlagBits SUBMIT_PROTECTED_BIT = 0x00000001;

distinct SciSyncClientTypeNV = inline uint;
const SciSyncClientTypeNV SCI_SYNC_CLIENT_TYPE_SIGNALER_NV = 0;
const SciSyncClientTypeNV SCI_SYNC_CLIENT_TYPE_WAITER_NV = 1;
const SciSyncClientTypeNV SCI_SYNC_CLIENT_TYPE_SIGNALER_WAITER_NV = 2;

distinct SciSyncPrimitiveTypeNV = inline uint;
const SciSyncPrimitiveTypeNV SCI_SYNC_PRIMITIVE_TYPE_FENCE_NV = 0;
const SciSyncPrimitiveTypeNV SCI_SYNC_PRIMITIVE_TYPE_SEMAPHORE_NV = 1;

distinct ProvokingVertexModeEXT = inline uint;
const ProvokingVertexModeEXT PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0;
const ProvokingVertexModeEXT PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1;

distinct PipelineCacheValidationVersion = inline uint;
const PipelineCacheValidationVersion PIPELINE_CACHE_VALIDATION_VERSION_SAFETY_CRITICAL_ONE = 1;

distinct AccelerationStructureMotionInstanceTypeNV = inline uint;
const AccelerationStructureMotionInstanceTypeNV ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0;
const AccelerationStructureMotionInstanceTypeNV ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1;
const AccelerationStructureMotionInstanceTypeNV ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2;

distinct GraphicsPipelineLibraryFlagBitsEXT = inline uint;
const GraphicsPipelineLibraryFlagBitsEXT GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 0x00000001;
const GraphicsPipelineLibraryFlagBitsEXT GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 0x00000002;
const GraphicsPipelineLibraryFlagBitsEXT GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 0x00000004;
const GraphicsPipelineLibraryFlagBitsEXT GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 0x00000008;

distinct DeviceAddressBindingFlagBitsEXT = inline uint;
const DeviceAddressBindingFlagBitsEXT DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 0x00000001;

distinct DeviceAddressBindingTypeEXT = inline uint;
const DeviceAddressBindingTypeEXT DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0;
const DeviceAddressBindingTypeEXT DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1;

distinct FrameBoundaryFlagBitsEXT = inline uint;
const FrameBoundaryFlagBitsEXT FRAME_BOUNDARY_FRAME_END_BIT_EXT = 0x00000001;

distinct PresentScalingFlagBitsEXT = inline uint;
const PresentScalingFlagBitsEXT PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 0x00000001;
const PresentScalingFlagBitsEXT PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 0x00000002;
const PresentScalingFlagBitsEXT PRESENT_SCALING_STRETCH_BIT_EXT = 0x00000004;

distinct PresentGravityFlagBitsEXT = inline uint;
const PresentGravityFlagBitsEXT PRESENT_GRAVITY_MIN_BIT_EXT = 0x00000001;
const PresentGravityFlagBitsEXT PRESENT_GRAVITY_MAX_BIT_EXT = 0x00000002;
const PresentGravityFlagBitsEXT PRESENT_GRAVITY_CENTERED_BIT_EXT = 0x00000004;

distinct PhysicalDeviceSchedulingControlsFlagBitsARM = inline uint;
const PhysicalDeviceSchedulingControlsFlagBitsARM PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM = 0x00000001;

distinct VideoCodecOperationFlagBitsKHR = inline uint;
const VideoCodecOperationFlagBitsKHR VIDEO_CODEC_OPERATION_NONE_KHR = 0;

distinct VideoChromaSubsamplingFlagBitsKHR = inline uint;
const VideoChromaSubsamplingFlagBitsKHR VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0;
const VideoChromaSubsamplingFlagBitsKHR VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 0x00000001;
const VideoChromaSubsamplingFlagBitsKHR VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 0x00000002;
const VideoChromaSubsamplingFlagBitsKHR VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 0x00000004;
const VideoChromaSubsamplingFlagBitsKHR VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 0x00000008;

distinct VideoComponentBitDepthFlagBitsKHR = inline uint;
const VideoComponentBitDepthFlagBitsKHR VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0;
const VideoComponentBitDepthFlagBitsKHR VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 0x00000001;
const VideoComponentBitDepthFlagBitsKHR VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 0x00000004;
const VideoComponentBitDepthFlagBitsKHR VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 0x00000010;

distinct VideoCapabilityFlagBitsKHR = inline uint;
const VideoCapabilityFlagBitsKHR VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 0x00000001;
const VideoCapabilityFlagBitsKHR VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 0x00000002;

distinct VideoSessionCreateFlagBitsKHR = inline uint;
const VideoSessionCreateFlagBitsKHR VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 0x00000001;

distinct VideoDecodeH264PictureLayoutFlagBitsKHR = inline uint;
const VideoDecodeH264PictureLayoutFlagBitsKHR VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0;
const VideoDecodeH264PictureLayoutFlagBitsKHR VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 0x00000001;
const VideoDecodeH264PictureLayoutFlagBitsKHR VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 0x00000002;

distinct VideoCodingControlFlagBitsKHR = inline uint;
const VideoCodingControlFlagBitsKHR VIDEO_CODING_CONTROL_RESET_BIT_KHR = 0x00000001;

distinct QueryResultStatusKHR = inline uint;
const QueryResultStatusKHR QUERY_RESULT_STATUS_ERROR_KHR = -1;
const QueryResultStatusKHR QUERY_RESULT_STATUS_NOT_READY_KHR = 0;
const QueryResultStatusKHR QUERY_RESULT_STATUS_COMPLETE_KHR = 1;

distinct VideoDecodeUsageFlagBitsKHR = inline uint;
const VideoDecodeUsageFlagBitsKHR VIDEO_DECODE_USAGE_DEFAULT_KHR = 0;
const VideoDecodeUsageFlagBitsKHR VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 0x00000001;
const VideoDecodeUsageFlagBitsKHR VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 0x00000002;
const VideoDecodeUsageFlagBitsKHR VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 0x00000004;

distinct VideoDecodeCapabilityFlagBitsKHR = inline uint;
const VideoDecodeCapabilityFlagBitsKHR VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 0x00000001;
const VideoDecodeCapabilityFlagBitsKHR VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 0x00000002;

distinct VideoEncodeUsageFlagBitsKHR = inline uint;
const VideoEncodeUsageFlagBitsKHR VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0;
const VideoEncodeUsageFlagBitsKHR VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 0x00000001;
const VideoEncodeUsageFlagBitsKHR VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 0x00000002;
const VideoEncodeUsageFlagBitsKHR VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 0x00000004;
const VideoEncodeUsageFlagBitsKHR VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 0x00000008;

distinct VideoEncodeContentFlagBitsKHR = inline uint;
const VideoEncodeContentFlagBitsKHR VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0;
const VideoEncodeContentFlagBitsKHR VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 0x00000001;
const VideoEncodeContentFlagBitsKHR VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 0x00000002;
const VideoEncodeContentFlagBitsKHR VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 0x00000004;

distinct VideoEncodeTuningModeKHR = inline uint;
const VideoEncodeTuningModeKHR VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0;
const VideoEncodeTuningModeKHR VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1;
const VideoEncodeTuningModeKHR VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2;
const VideoEncodeTuningModeKHR VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3;
const VideoEncodeTuningModeKHR VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4;

distinct VideoEncodeCapabilityFlagBitsKHR = inline uint;
const VideoEncodeCapabilityFlagBitsKHR VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 0x00000001;
const VideoEncodeCapabilityFlagBitsKHR VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 0x00000002;

distinct VideoEncodeFeedbackFlagBitsKHR = inline uint;
const VideoEncodeFeedbackFlagBitsKHR VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 0x00000001;
const VideoEncodeFeedbackFlagBitsKHR VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 0x00000002;
const VideoEncodeFeedbackFlagBitsKHR VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 0x00000004;

distinct VideoEncodeRateControlModeFlagBitsKHR = inline uint;
const VideoEncodeRateControlModeFlagBitsKHR VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0;
const VideoEncodeRateControlModeFlagBitsKHR VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 0x00000001;
const VideoEncodeRateControlModeFlagBitsKHR VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 0x00000002;
const VideoEncodeRateControlModeFlagBitsKHR VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 0x00000004;

distinct VideoEncodeH264CapabilityFlagBitsKHR = inline uint;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 0x00000001;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 0x00000002;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 0x00000004;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 0x00000008;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 0x00000010;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 0x00000020;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 0x00000040;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 0x00000080;
const VideoEncodeH264CapabilityFlagBitsKHR VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 0x00000100;

distinct VideoEncodeH264StdFlagBitsKHR = inline uint;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 0x00000001;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 0x00000002;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 0x00000004;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 0x00000008;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 0x00000010;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 0x00000020;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 0x00000040;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 0x00000080;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 0x00000100;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 0x00000200;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 0x00000400;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 0x00000800;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 0x00001000;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 0x00002000;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 0x00004000;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 0x00008000;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 0x00010000;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 0x00020000;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 0x00080000;
const VideoEncodeH264StdFlagBitsKHR VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 0x00100000;

distinct VideoEncodeH264RateControlFlagBitsKHR = inline uint;
const VideoEncodeH264RateControlFlagBitsKHR VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 0x00000001;
const VideoEncodeH264RateControlFlagBitsKHR VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 0x00000002;
const VideoEncodeH264RateControlFlagBitsKHR VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 0x00000004;
const VideoEncodeH264RateControlFlagBitsKHR VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 0x00000008;
const VideoEncodeH264RateControlFlagBitsKHR VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 0x00000010;

distinct HostImageCopyFlagBitsEXT = inline uint;
const HostImageCopyFlagBitsEXT HOST_IMAGE_COPY_MEMCPY_EXT = 0x00000001;

distinct ImageConstraintsInfoFlagBitsFUCHSIA = inline uint;
const ImageConstraintsInfoFlagBitsFUCHSIA IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA = 0x00000001;
const ImageConstraintsInfoFlagBitsFUCHSIA IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA = 0x00000002;
const ImageConstraintsInfoFlagBitsFUCHSIA IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA = 0x00000004;
const ImageConstraintsInfoFlagBitsFUCHSIA IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA = 0x00000008;
const ImageConstraintsInfoFlagBitsFUCHSIA IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA = 0x00000010;

distinct FormatFeatureFlagBits2 = inline uint;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = 0x00000001;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = 0x00000002;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = 0x00000010;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = 0x00000040;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = 0x00000080;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_BLIT_SRC_BIT = 0x00000400;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_BLIT_DST_BIT = 0x00000800;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = 0x00002000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_TRANSFER_SRC_BIT = 0x00004000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_TRANSFER_DST_BIT = 0x00008000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_DISJOINT_BIT = 0x00400000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = 0x00800000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = 0x80000000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = 0x100000000;
const FormatFeatureFlagBits2 FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = 0x200000000;

distinct RenderingFlagBits = inline uint;
const RenderingFlagBits RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 0x00000001;
const RenderingFlagBits RENDERING_SUSPENDING_BIT = 0x00000002;
const RenderingFlagBits RENDERING_RESUMING_BIT = 0x00000004;

distinct VideoEncodeH265CapabilityFlagBitsKHR = inline uint;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 0x00000001;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 0x00000002;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 0x00000004;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 0x00000008;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 0x00000010;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 0x00000020;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 0x00000040;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 0x00000080;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 0x00000100;
const VideoEncodeH265CapabilityFlagBitsKHR VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 0x00000200;

distinct VideoEncodeH265StdFlagBitsKHR = inline uint;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 0x00000001;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 0x00000002;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 0x00000004;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 0x00000008;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 0x00000010;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 0x00000020;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 0x00000040;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 0x00000080;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 0x00000100;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 0x00000200;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 0x00000400;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 0x00000800;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 0x00001000;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 0x00002000;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 0x00004000;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 0x00008000;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 0x00010000;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 0x00020000;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 0x00040000;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 0x00080000;
const VideoEncodeH265StdFlagBitsKHR VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 0x00100000;

distinct VideoEncodeH265RateControlFlagBitsKHR = inline uint;
const VideoEncodeH265RateControlFlagBitsKHR VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 0x00000001;
const VideoEncodeH265RateControlFlagBitsKHR VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 0x00000002;
const VideoEncodeH265RateControlFlagBitsKHR VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 0x00000004;
const VideoEncodeH265RateControlFlagBitsKHR VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 0x00000008;
const VideoEncodeH265RateControlFlagBitsKHR VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 0x00000010;

distinct VideoEncodeH265CtbSizeFlagBitsKHR = inline uint;
const VideoEncodeH265CtbSizeFlagBitsKHR VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 0x00000001;
const VideoEncodeH265CtbSizeFlagBitsKHR VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 0x00000002;
const VideoEncodeH265CtbSizeFlagBitsKHR VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 0x00000004;

distinct VideoEncodeH265TransformBlockSizeFlagBitsKHR = inline uint;
const VideoEncodeH265TransformBlockSizeFlagBitsKHR VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 0x00000001;
const VideoEncodeH265TransformBlockSizeFlagBitsKHR VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 0x00000002;
const VideoEncodeH265TransformBlockSizeFlagBitsKHR VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 0x00000004;
const VideoEncodeH265TransformBlockSizeFlagBitsKHR VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 0x00000008;

distinct ExportMetalObjectTypeFlagBitsEXT = inline uint;
const ExportMetalObjectTypeFlagBitsEXT EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT = 0x00000001;
const ExportMetalObjectTypeFlagBitsEXT EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT = 0x00000002;
const ExportMetalObjectTypeFlagBitsEXT EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT = 0x00000004;
const ExportMetalObjectTypeFlagBitsEXT EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT = 0x00000008;
const ExportMetalObjectTypeFlagBitsEXT EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT = 0x00000010;
const ExportMetalObjectTypeFlagBitsEXT EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT = 0x00000020;

distinct ImageCompressionFlagBitsEXT = inline uint;
const ImageCompressionFlagBitsEXT IMAGE_COMPRESSION_DEFAULT_EXT = 0;
const ImageCompressionFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 0x00000001;
const ImageCompressionFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 0x00000002;
const ImageCompressionFlagBitsEXT IMAGE_COMPRESSION_DISABLED_EXT = 0x00000004;

distinct ImageCompressionFixedRateFlagBitsEXT = inline uint;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 0x00000001;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 0x00000002;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 0x00000004;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 0x00000008;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 0x00000010;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 0x00000020;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 0x00000040;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 0x00000080;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 0x00000100;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 0x00000200;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 0x00000400;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 0x00000800;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 0x00001000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 0x00002000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 0x00004000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 0x00008000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 0x00010000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 0x00020000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 0x00040000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 0x00080000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 0x00100000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 0x00200000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 0x00400000;
const ImageCompressionFixedRateFlagBitsEXT IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 0x00800000;

distinct PipelineRobustnessBufferBehaviorEXT = inline uint;
const PipelineRobustnessBufferBehaviorEXT PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0;
const PipelineRobustnessBufferBehaviorEXT PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1;
const PipelineRobustnessBufferBehaviorEXT PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2;
const PipelineRobustnessBufferBehaviorEXT PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3;

distinct PipelineRobustnessImageBehaviorEXT = inline uint;
const PipelineRobustnessImageBehaviorEXT PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0;
const PipelineRobustnessImageBehaviorEXT PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1;
const PipelineRobustnessImageBehaviorEXT PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2;
const PipelineRobustnessImageBehaviorEXT PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3;

distinct OpticalFlowGridSizeFlagBitsNV = inline uint;
const OpticalFlowGridSizeFlagBitsNV OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0;
const OpticalFlowGridSizeFlagBitsNV OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 0x00000001;
const OpticalFlowGridSizeFlagBitsNV OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 0x00000002;
const OpticalFlowGridSizeFlagBitsNV OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 0x00000004;
const OpticalFlowGridSizeFlagBitsNV OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 0x00000008;

distinct OpticalFlowUsageFlagBitsNV = inline uint;
const OpticalFlowUsageFlagBitsNV OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0;
const OpticalFlowUsageFlagBitsNV OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 0x00000001;
const OpticalFlowUsageFlagBitsNV OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 0x00000002;
const OpticalFlowUsageFlagBitsNV OPTICAL_FLOW_USAGE_HINT_BIT_NV = 0x00000004;
const OpticalFlowUsageFlagBitsNV OPTICAL_FLOW_USAGE_COST_BIT_NV = 0x00000008;
const OpticalFlowUsageFlagBitsNV OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 0x00000010;

distinct OpticalFlowPerformanceLevelNV = inline uint;
const OpticalFlowPerformanceLevelNV OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0;
const OpticalFlowPerformanceLevelNV OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1;
const OpticalFlowPerformanceLevelNV OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2;
const OpticalFlowPerformanceLevelNV OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3;

distinct OpticalFlowSessionBindingPointNV = inline uint;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7;
const OpticalFlowSessionBindingPointNV OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8;

distinct OpticalFlowSessionCreateFlagBitsNV = inline uint;
const OpticalFlowSessionCreateFlagBitsNV OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 0x00000001;
const OpticalFlowSessionCreateFlagBitsNV OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 0x00000002;
const OpticalFlowSessionCreateFlagBitsNV OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 0x00000004;
const OpticalFlowSessionCreateFlagBitsNV OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 0x00000008;
const OpticalFlowSessionCreateFlagBitsNV OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 0x00000010;

distinct OpticalFlowExecuteFlagBitsNV = inline uint;
const OpticalFlowExecuteFlagBitsNV OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 0x00000001;

distinct MicromapTypeEXT = inline uint;
const MicromapTypeEXT MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0;

distinct BuildMicromapFlagBitsEXT = inline uint;
const BuildMicromapFlagBitsEXT BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 0x00000001;
const BuildMicromapFlagBitsEXT BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 0x00000002;
const BuildMicromapFlagBitsEXT BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 0x00000004;

distinct MicromapCreateFlagBitsEXT = inline uint;
const MicromapCreateFlagBitsEXT MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 0x00000001;

distinct CopyMicromapModeEXT = inline uint;
const CopyMicromapModeEXT COPY_MICROMAP_MODE_CLONE_EXT = 0;
const CopyMicromapModeEXT COPY_MICROMAP_MODE_SERIALIZE_EXT = 1;
const CopyMicromapModeEXT COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2;
const CopyMicromapModeEXT COPY_MICROMAP_MODE_COMPACT_EXT = 3;

distinct BuildMicromapModeEXT = inline uint;
const BuildMicromapModeEXT BUILD_MICROMAP_MODE_BUILD_EXT = 0;

distinct OpacityMicromapFormatEXT = inline uint;
const OpacityMicromapFormatEXT OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1;
const OpacityMicromapFormatEXT OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2;

distinct OpacityMicromapSpecialIndexEXT = inline uint;
const OpacityMicromapSpecialIndexEXT OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1;
const OpacityMicromapSpecialIndexEXT OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2;
const OpacityMicromapSpecialIndexEXT OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3;
const OpacityMicromapSpecialIndexEXT OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4;

distinct DepthBiasRepresentationEXT = inline uint;
const DepthBiasRepresentationEXT DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0;
const DepthBiasRepresentationEXT DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1;
const DepthBiasRepresentationEXT DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2;

distinct DeviceFaultAddressTypeEXT = inline uint;
const DeviceFaultAddressTypeEXT DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0;
const DeviceFaultAddressTypeEXT DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1;
const DeviceFaultAddressTypeEXT DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2;
const DeviceFaultAddressTypeEXT DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3;
const DeviceFaultAddressTypeEXT DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4;
const DeviceFaultAddressTypeEXT DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5;
const DeviceFaultAddressTypeEXT DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6;

distinct DeviceFaultVendorBinaryHeaderVersionEXT = inline uint;
const DeviceFaultVendorBinaryHeaderVersionEXT DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1;

distinct DisplacementMicromapFormatNV = inline uint;
const DisplacementMicromapFormatNV DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV = 1;
const DisplacementMicromapFormatNV DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV = 2;
const DisplacementMicromapFormatNV DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV = 3;

distinct ShaderCreateFlagBitsEXT = inline uint;
const ShaderCreateFlagBitsEXT SHADER_CREATE_LINK_STAGE_BIT_EXT = 0x00000001;

distinct ShaderCodeTypeEXT = inline uint;
const ShaderCodeTypeEXT SHADER_CODE_TYPE_BINARY_EXT = 0;
const ShaderCodeTypeEXT SHADER_CODE_TYPE_SPIRV_EXT = 1;

distinct ScopeKHR = inline uint;
const ScopeKHR SCOPE_DEVICE_KHR = 1;
const ScopeKHR SCOPE_WORKGROUP_KHR = 2;
const ScopeKHR SCOPE_SUBGROUP_KHR = 3;
const ScopeKHR SCOPE_QUEUE_FAMILY_KHR = 5;

distinct ComponentTypeKHR = inline uint;
const ComponentTypeKHR COMPONENT_TYPE_FLOAT16_KHR = 0;
const ComponentTypeKHR COMPONENT_TYPE_FLOAT32_KHR = 1;
const ComponentTypeKHR COMPONENT_TYPE_FLOAT64_KHR = 2;
const ComponentTypeKHR COMPONENT_TYPE_SINT8_KHR = 3;
const ComponentTypeKHR COMPONENT_TYPE_SINT16_KHR = 4;
const ComponentTypeKHR COMPONENT_TYPE_SINT32_KHR = 5;
const ComponentTypeKHR COMPONENT_TYPE_SINT64_KHR = 6;
const ComponentTypeKHR COMPONENT_TYPE_UINT8_KHR = 7;
const ComponentTypeKHR COMPONENT_TYPE_UINT16_KHR = 8;
const ComponentTypeKHR COMPONENT_TYPE_UINT32_KHR = 9;
const ComponentTypeKHR COMPONENT_TYPE_UINT64_KHR = 10;

distinct CubicFilterWeightsQCOM = inline uint;
const CubicFilterWeightsQCOM CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0;
const CubicFilterWeightsQCOM CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1;
const CubicFilterWeightsQCOM CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2;
const CubicFilterWeightsQCOM CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3;

distinct BlockMatchWindowCompareModeQCOM = inline uint;
const BlockMatchWindowCompareModeQCOM BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0;
const BlockMatchWindowCompareModeQCOM BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1;

distinct PhysicalDeviceLayeredApiKHR = inline uint;
const PhysicalDeviceLayeredApiKHR PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR = 0;
const PhysicalDeviceLayeredApiKHR PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR = 1;
const PhysicalDeviceLayeredApiKHR PHYSICAL_DEVICE_LAYERED_API_METAL_KHR = 2;
const PhysicalDeviceLayeredApiKHR PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR = 3;
const PhysicalDeviceLayeredApiKHR PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR = 4;

distinct LayeredDriverUnderlyingApiMSFT = inline uint;
const LayeredDriverUnderlyingApiMSFT LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0;
const LayeredDriverUnderlyingApiMSFT LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1;

distinct LatencyMarkerNV = inline uint;
const LatencyMarkerNV LATENCY_MARKER_SIMULATION_START_NV = 0;
const LatencyMarkerNV LATENCY_MARKER_SIMULATION_END_NV = 1;
const LatencyMarkerNV LATENCY_MARKER_RENDERSUBMIT_START_NV = 2;
const LatencyMarkerNV LATENCY_MARKER_RENDERSUBMIT_END_NV = 3;
const LatencyMarkerNV LATENCY_MARKER_PRESENT_START_NV = 4;
const LatencyMarkerNV LATENCY_MARKER_PRESENT_END_NV = 5;
const LatencyMarkerNV LATENCY_MARKER_INPUT_SAMPLE_NV = 6;
const LatencyMarkerNV LATENCY_MARKER_TRIGGER_FLASH_NV = 7;
const LatencyMarkerNV LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8;
const LatencyMarkerNV LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9;
const LatencyMarkerNV LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 10;
const LatencyMarkerNV LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 11;

distinct OutOfBandQueueTypeNV = inline uint;
const OutOfBandQueueTypeNV OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0;
const OutOfBandQueueTypeNV OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1;

fault VkErrors {
 ERROR_OUT_OF_HOST_MEMORY,
 ERROR_OUT_OF_DEVICE_MEMORY,
 ERROR_INITIALIZATION_FAILED,
 ERROR_DEVICE_LOST,
 ERROR_MEMORY_MAP_FAILED,
 ERROR_LAYER_NOT_PRESENT,
 ERROR_EXTENSION_NOT_PRESENT,
 ERROR_FEATURE_NOT_PRESENT,
 ERROR_INCOMPATIBLE_DRIVER,
 ERROR_TOO_MANY_OBJECTS,
 ERROR_FORMAT_NOT_SUPPORTED,
 ERROR_FRAGMENTED_POOL,
 ERROR_UNKNOWN,
 ERROR_OUT_OF_POOL_MEMORY,
 ERROR_INVALID_EXTERNAL_HANDLE,
 ERROR_FRAGMENTATION,
 ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
 ERROR_SURFACE_LOST_KHR,
 ERROR_NATIVE_WINDOW_IN_USE_KHR,
}

struct BaseOutStructure { 
   StructureType sType;
   BaseOutStructure* pNext;
}
struct BaseInStructure { 
   StructureType sType;
   BaseInStructure* pNext;
}
struct Offset2D { 
   int x;
   int y;
}
struct Offset3D { 
   int x;
   int y;
   int z;
}
struct Extent2D { 
   uint width;
   uint height;
}
struct Extent3D { 
   uint width;
   uint height;
   uint depth;
}
struct Viewport { 
   float x;
   float y;
   float width;
   float height;
   float minDepth;
   float maxDepth;
}
struct Rect2D { 
   Offset2D offset;
   Extent2D extent;
}
struct ClearRect { 
   Rect2D rect;
   uint baseArrayLayer;
   uint layerCount;
}
struct ComponentMapping { 
   ComponentSwizzle r;
   ComponentSwizzle g;
   ComponentSwizzle b;
   ComponentSwizzle a;
}
struct PhysicalDeviceProperties { 
   uint apiVersion;
   uint driverVersion;
   uint vendorID;
   uint deviceID;
   PhysicalDeviceType deviceType;
   char[MAX_PHYSICAL_DEVICE_NAME_SIZE] deviceName;
   uint[UUID_SIZE] pipelineCacheUUID;
   PhysicalDeviceLimits limits;
   PhysicalDeviceSparseProperties sparseProperties;
}
struct ExtensionProperties { 
   char[MAX_EXTENSION_NAME_SIZE] extensionName;
   uint specVersion;
}
struct LayerProperties { 
   char[MAX_EXTENSION_NAME_SIZE] layerName;
   uint specVersion;
   uint implementationVersion;
   char[MAX_DESCRIPTION_SIZE] description;
}
struct ApplicationInfo { 
   StructureType sType;
   void* pNext;
   char* pApplicationName;
   uint applicationVersion;
   char* pEngineName;
   uint engineVersion;
   uint apiVersion;
}
struct AllocationCallbacks { 
   void* pUserData;
   PFN_vkAllocationFunction pfnAllocation;
   PFN_vkReallocationFunction pfnReallocation;
   PFN_vkFreeFunction pfnFree;
   PFN_vkInternalAllocationNotification pfnInternalAllocation;
   PFN_vkInternalFreeNotification pfnInternalFree;
}
struct DeviceQueueCreateInfo { 
   StructureType sType;
   void* pNext;
   DeviceQueueCreateFlags flags;
   uint queueFamilyIndex;
   uint queueCount;
   float* pQueuePriorities;
}
struct DeviceCreateInfo { 
   StructureType sType;
   void* pNext;
   DeviceCreateFlags flags;
   uint queueCreateInfoCount;
   DeviceQueueCreateInfo* pQueueCreateInfos;
   uint enabledLayerCount;
   char* ppEnabledLayerNames;
   uint enabledExtensionCount;
   char* ppEnabledExtensionNames;
   PhysicalDeviceFeatures* pEnabledFeatures;
}
struct InstanceCreateInfo { 
   StructureType sType;
   void* pNext;
   InstanceCreateFlags flags;
   ApplicationInfo* pApplicationInfo;
   uint enabledLayerCount;
   char* ppEnabledLayerNames;
   uint enabledExtensionCount;
   char* ppEnabledExtensionNames;
}
struct QueueFamilyProperties { 
   QueueFlags queueFlags;
   uint queueCount;
   uint timestampValidBits;
   Extent3D minImageTransferGranularity;
}
struct PhysicalDeviceMemoryProperties { 
   uint memoryTypeCount;
   MemoryType[MAX_MEMORY_TYPES] memoryTypes;
   uint memoryHeapCount;
   MemoryHeap[MAX_MEMORY_HEAPS] memoryHeaps;
}
struct MemoryAllocateInfo { 
   StructureType sType;
   void* pNext;
   DeviceSize allocationSize;
   uint memoryTypeIndex;
}
struct MemoryRequirements { 
   DeviceSize size;
   DeviceSize alignment;
   uint memoryTypeBits;
}
struct SparseImageFormatProperties { 
   ImageAspectFlags aspectMask;
   Extent3D imageGranularity;
   SparseImageFormatFlags flags;
}
struct SparseImageMemoryRequirements { 
   SparseImageFormatProperties formatProperties;
   uint imageMipTailFirstLod;
   DeviceSize imageMipTailSize;
   DeviceSize imageMipTailOffset;
   DeviceSize imageMipTailStride;
}
struct MemoryType { 
   MemoryPropertyFlags propertyFlags;
   uint heapIndex;
}
struct MemoryHeap { 
   DeviceSize size;
   MemoryHeapFlags flags;
}
struct MappedMemoryRange { 
   StructureType sType;
   void* pNext;
   DeviceMemory memory;
   DeviceSize offset;
   DeviceSize size;
}
struct FormatProperties { 
   FormatFeatureFlags linearTilingFeatures;
   FormatFeatureFlags optimalTilingFeatures;
   FormatFeatureFlags bufferFeatures;
}
struct ImageFormatProperties { 
   Extent3D maxExtent;
   uint maxMipLevels;
   uint maxArrayLayers;
   SampleCountFlags sampleCounts;
   DeviceSize maxResourceSize;
}
struct DescriptorBufferInfo { 
   Buffer buffer;
   DeviceSize offset;
   DeviceSize range;
}
struct DescriptorImageInfo { 
   Sampler sampler;
   ImageView imageView;
   ImageLayout imageLayout;
}
struct WriteDescriptorSet { 
   StructureType sType;
   void* pNext;
   DescriptorSet dstSet;
   uint dstBinding;
   uint dstArrayElement;
   uint descriptorCount;
   DescriptorType descriptorType;
   DescriptorImageInfo* pImageInfo;
   DescriptorBufferInfo* pBufferInfo;
   BufferView* pTexelBufferView;
}
struct CopyDescriptorSet { 
   StructureType sType;
   void* pNext;
   DescriptorSet srcSet;
   uint srcBinding;
   uint srcArrayElement;
   DescriptorSet dstSet;
   uint dstBinding;
   uint dstArrayElement;
   uint descriptorCount;
}
struct BufferCreateInfo { 
   StructureType sType;
   void* pNext;
   BufferCreateFlags flags;
   DeviceSize size;
   BufferUsageFlags usage;
   SharingMode sharingMode;
   uint queueFamilyIndexCount;
   uint* pQueueFamilyIndices;
}
struct BufferViewCreateInfo { 
   StructureType sType;
   void* pNext;
   BufferViewCreateFlags flags;
   Buffer buffer;
   Format format;
   DeviceSize offset;
   DeviceSize range;
}
struct ImageSubresource { 
   ImageAspectFlags aspectMask;
   uint mipLevel;
   uint arrayLayer;
}
struct ImageSubresourceLayers { 
   ImageAspectFlags aspectMask;
   uint mipLevel;
   uint baseArrayLayer;
   uint layerCount;
}
struct ImageSubresourceRange { 
   ImageAspectFlags aspectMask;
   uint baseMipLevel;
   uint levelCount;
   uint baseArrayLayer;
   uint layerCount;
}
struct MemoryBarrier { 
   StructureType sType;
   void* pNext;
   AccessFlags srcAccessMask;
   AccessFlags dstAccessMask;
}
struct BufferMemoryBarrier { 
   StructureType sType;
   void* pNext;
   AccessFlags srcAccessMask;
   AccessFlags dstAccessMask;
   uint srcQueueFamilyIndex;
   uint dstQueueFamilyIndex;
   Buffer buffer;
   DeviceSize offset;
   DeviceSize size;
}
struct ImageMemoryBarrier { 
   StructureType sType;
   void* pNext;
   AccessFlags srcAccessMask;
   AccessFlags dstAccessMask;
   ImageLayout oldLayout;
   ImageLayout newLayout;
   uint srcQueueFamilyIndex;
   uint dstQueueFamilyIndex;
   Image image;
   ImageSubresourceRange subresourceRange;
}
struct ImageCreateInfo { 
   StructureType sType;
   void* pNext;
   ImageCreateFlags flags;
   ImageType imageType;
   Format format;
   Extent3D extent;
   uint mipLevels;
   uint arrayLayers;
   SampleCountFlagBits samples;
   ImageTiling tiling;
   ImageUsageFlags usage;
   SharingMode sharingMode;
   uint queueFamilyIndexCount;
   uint* pQueueFamilyIndices;
   ImageLayout initialLayout;
}
struct SubresourceLayout { 
   DeviceSize offset;
   DeviceSize size;
   DeviceSize rowPitch;
   DeviceSize arrayPitch;
   DeviceSize depthPitch;
}
struct ImageViewCreateInfo { 
   StructureType sType;
   void* pNext;
   ImageViewCreateFlags flags;
   Image image;
   ImageViewType viewType;
   Format format;
   ComponentMapping components;
   ImageSubresourceRange subresourceRange;
}
struct BufferCopy { 
   DeviceSize srcOffset;
   DeviceSize dstOffset;
   DeviceSize size;
}
struct SparseMemoryBind { 
   DeviceSize resourceOffset;
   DeviceSize size;
   DeviceMemory memory;
   DeviceSize memoryOffset;
   SparseMemoryBindFlags flags;
}
struct SparseImageMemoryBind { 
   ImageSubresource subresource;
   Offset3D offset;
   Extent3D extent;
   DeviceMemory memory;
   DeviceSize memoryOffset;
   SparseMemoryBindFlags flags;
}
struct SparseBufferMemoryBindInfo { 
   Buffer buffer;
   uint bindCount;
   SparseMemoryBind* pBinds;
}
struct SparseImageOpaqueMemoryBindInfo { 
   Image image;
   uint bindCount;
   SparseMemoryBind* pBinds;
}
struct SparseImageMemoryBindInfo { 
   Image image;
   uint bindCount;
   SparseImageMemoryBind* pBinds;
}
struct BindSparseInfo { 
   StructureType sType;
   void* pNext;
   uint waitSemaphoreCount;
   Semaphore* pWaitSemaphores;
   uint bufferBindCount;
   SparseBufferMemoryBindInfo* pBufferBinds;
   uint imageOpaqueBindCount;
   SparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
   uint imageBindCount;
   SparseImageMemoryBindInfo* pImageBinds;
   uint signalSemaphoreCount;
   Semaphore* pSignalSemaphores;
}
struct ImageCopy { 
   ImageSubresourceLayers srcSubresource;
   Offset3D srcOffset;
   ImageSubresourceLayers dstSubresource;
   Offset3D dstOffset;
   Extent3D extent;
}
struct ImageBlit { 
   ImageSubresourceLayers srcSubresource;
   Offset3D[2] srcOffsets;
   ImageSubresourceLayers dstSubresource;
   Offset3D[2] dstOffsets;
}
struct BufferImageCopy { 
   DeviceSize bufferOffset;
   uint bufferRowLength;
   uint bufferImageHeight;
   ImageSubresourceLayers imageSubresource;
   Offset3D imageOffset;
   Extent3D imageExtent;
}
struct ImageResolve { 
   ImageSubresourceLayers srcSubresource;
   Offset3D srcOffset;
   ImageSubresourceLayers dstSubresource;
   Offset3D dstOffset;
   Extent3D extent;
}
struct ShaderModuleCreateInfo { 
   StructureType sType;
   void* pNext;
   ShaderModuleCreateFlags flags;
   usz codeSize;
   uint* pCode;
}
struct DescriptorSetLayoutBinding { 
   uint binding;
   DescriptorType descriptorType;
   uint descriptorCount;
   ShaderStageFlags stageFlags;
   Sampler* pImmutableSamplers;
}
struct DescriptorSetLayoutCreateInfo { 
   StructureType sType;
   void* pNext;
   DescriptorSetLayoutCreateFlags flags;
   uint bindingCount;
   DescriptorSetLayoutBinding* pBindings;
}
struct DescriptorPoolSize { 
   DescriptorType type;
   uint descriptorCount;
}
struct DescriptorPoolCreateInfo { 
   StructureType sType;
   void* pNext;
   DescriptorPoolCreateFlags flags;
   uint maxSets;
   uint poolSizeCount;
   DescriptorPoolSize* pPoolSizes;
}
struct DescriptorSetAllocateInfo { 
   StructureType sType;
   void* pNext;
   DescriptorPool descriptorPool;
   uint descriptorSetCount;
   DescriptorSetLayout* pSetLayouts;
}
struct SpecializationMapEntry { 
   uint constantID;
   uint offset;
   usz size;
}
struct SpecializationInfo { 
   uint mapEntryCount;
   SpecializationMapEntry* pMapEntries;
   usz dataSize;
   void* pData;
}
struct PipelineShaderStageCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineShaderStageCreateFlags flags;
   ShaderStageFlagBits stage;
   ShaderModule module;
   char* pName;
   char* pName;
   SpecializationInfo* pSpecializationInfo;
}
struct ComputePipelineCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineCreateFlags flags;
   PipelineShaderStageCreateInfo stage;
   PipelineLayout layout;
   Pipeline basePipelineHandle;
   int basePipelineIndex;
}
struct VertexInputBindingDescription { 
   uint binding;
   uint stride;
   VertexInputRate inputRate;
}
struct VertexInputAttributeDescription { 
   uint location;
   uint binding;
   Format format;
   uint offset;
}
struct PipelineVertexInputStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineVertexInputStateCreateFlags flags;
   uint vertexBindingDescriptionCount;
   VertexInputBindingDescription* pVertexBindingDescriptions;
   uint vertexAttributeDescriptionCount;
   VertexInputAttributeDescription* pVertexAttributeDescriptions;
}
struct PipelineInputAssemblyStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineInputAssemblyStateCreateFlags flags;
   PrimitiveTopology topology;
   uint primitiveRestartEnable;
}
struct PipelineTessellationStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineTessellationStateCreateFlags flags;
   uint patchControlPoints;
}
struct PipelineViewportStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineViewportStateCreateFlags flags;
   uint viewportCount;
   Viewport* pViewports;
   uint scissorCount;
   Rect2D* pScissors;
}
struct PipelineRasterizationStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineRasterizationStateCreateFlags flags;
   uint depthClampEnable;
   uint rasterizerDiscardEnable;
   PolygonMode polygonMode;
   CullModeFlags cullMode;
   FrontFace frontFace;
   uint depthBiasEnable;
   float depthBiasConstantFactor;
   float depthBiasClamp;
   float depthBiasSlopeFactor;
   float lineWidth;
}
struct PipelineMultisampleStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineMultisampleStateCreateFlags flags;
   SampleCountFlagBits rasterizationSamples;
   uint sampleShadingEnable;
   float minSampleShading;
   SampleMask* pSampleMask;
   uint alphaToCoverageEnable;
   uint alphaToOneEnable;
}
struct PipelineColorBlendAttachmentState { 
   uint blendEnable;
   BlendFactor srcColorBlendFactor;
   BlendFactor dstColorBlendFactor;
   BlendOp colorBlendOp;
   BlendFactor srcAlphaBlendFactor;
   BlendFactor dstAlphaBlendFactor;
   BlendOp alphaBlendOp;
   ColorComponentFlags colorWriteMask;
}
struct PipelineColorBlendStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineColorBlendStateCreateFlags flags;
   uint logicOpEnable;
   LogicOp logicOp;
   uint attachmentCount;
   PipelineColorBlendAttachmentState* pAttachments;
   float[4] blendConstants;
}
struct PipelineDynamicStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineDynamicStateCreateFlags flags;
   uint dynamicStateCount;
   DynamicState* pDynamicStates;
}
struct StencilOpState { 
   StencilOp failOp;
   StencilOp passOp;
   StencilOp depthFailOp;
   CompareOp compareOp;
   uint compareMask;
   uint writeMask;
   uint reference;
}
struct PipelineDepthStencilStateCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineDepthStencilStateCreateFlags flags;
   uint depthTestEnable;
   uint depthWriteEnable;
   CompareOp depthCompareOp;
   uint depthBoundsTestEnable;
   uint stencilTestEnable;
   StencilOpState front;
   StencilOpState back;
   float minDepthBounds;
   float maxDepthBounds;
}
struct GraphicsPipelineCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineCreateFlags flags;
   uint stageCount;
   PipelineShaderStageCreateInfo* pStages;
   PipelineShaderStageCreateInfo* pStages;
   PipelineVertexInputStateCreateInfo* pVertexInputState;
   PipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
   PipelineTessellationStateCreateInfo* pTessellationState;
   PipelineViewportStateCreateInfo* pViewportState;
   PipelineRasterizationStateCreateInfo* pRasterizationState;
   PipelineMultisampleStateCreateInfo* pMultisampleState;
   PipelineDepthStencilStateCreateInfo* pDepthStencilState;
   PipelineColorBlendStateCreateInfo* pColorBlendState;
   PipelineDynamicStateCreateInfo* pDynamicState;
   PipelineLayout layout;
   RenderPass renderPass;
   uint subpass;
   Pipeline basePipelineHandle;
   int basePipelineIndex;
}
struct PipelineCacheCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineCacheCreateFlags flags;
   usz initialDataSize;
   usz initialDataSize;
   void* pInitialData;
}
struct PipelineCacheHeaderVersionOne { 
   uint headerSize;
   PipelineCacheHeaderVersion headerVersion;
   uint vendorID;
   uint deviceID;
   uint[UUID_SIZE] pipelineCacheUUID;
}
struct PushConstantRange { 
   ShaderStageFlags stageFlags;
   uint offset;
   uint size;
}
struct PipelineLayoutCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineLayoutCreateFlags flags;
   uint setLayoutCount;
   DescriptorSetLayout* pSetLayouts;
   uint pushConstantRangeCount;
   PushConstantRange* pPushConstantRanges;
}
struct SamplerCreateInfo { 
   StructureType sType;
   void* pNext;
   SamplerCreateFlags flags;
   Filter magFilter;
   Filter minFilter;
   SamplerMipmapMode mipmapMode;
   SamplerAddressMode addressModeU;
   SamplerAddressMode addressModeV;
   SamplerAddressMode addressModeW;
   float mipLodBias;
   uint anisotropyEnable;
   float maxAnisotropy;
   uint compareEnable;
   CompareOp compareOp;
   float minLod;
   float maxLod;
   BorderColor borderColor;
   uint unnormalizedCoordinates;
}
struct CommandPoolCreateInfo { 
   StructureType sType;
   void* pNext;
   CommandPoolCreateFlags flags;
   uint queueFamilyIndex;
}
struct CommandBufferAllocateInfo { 
   StructureType sType;
   void* pNext;
   CommandPool commandPool;
   CommandBufferLevel level;
   uint commandBufferCount;
}
struct CommandBufferInheritanceInfo { 
   StructureType sType;
   void* pNext;
   RenderPass renderPass;
   uint subpass;
   Framebuffer framebuffer;
   uint occlusionQueryEnable;
   QueryControlFlags queryFlags;
   QueryPipelineStatisticFlags pipelineStatistics;
}
struct CommandBufferBeginInfo { 
   StructureType sType;
   void* pNext;
   CommandBufferUsageFlags flags;
   CommandBufferInheritanceInfo* pInheritanceInfo;
}
struct RenderPassBeginInfo { 
   StructureType sType;
   void* pNext;
   RenderPass renderPass;
   Framebuffer framebuffer;
   Rect2D renderArea;
   uint clearValueCount;
   ClearValue* pClearValues;
}
struct ClearDepthStencilValue { 
   float depth;
   uint stencil;
}
struct ClearAttachment { 
   ImageAspectFlags aspectMask;
   uint colorAttachment;
   ClearValue clearValue;
}
struct AttachmentDescription { 
   AttachmentDescriptionFlags flags;
   Format format;
   SampleCountFlagBits samples;
   AttachmentLoadOp loadOp;
   AttachmentStoreOp storeOp;
   AttachmentLoadOp stencilLoadOp;
   AttachmentStoreOp stencilStoreOp;
   ImageLayout initialLayout;
   ImageLayout finalLayout;
}
struct AttachmentReference { 
   uint attachment;
   ImageLayout layout;
}
struct SubpassDescription { 
   SubpassDescriptionFlags flags;
   PipelineBindPoint pipelineBindPoint;
   uint inputAttachmentCount;
   AttachmentReference* pInputAttachments;
   uint colorAttachmentCount;
   AttachmentReference* pColorAttachments;
   AttachmentReference* pResolveAttachments;
   AttachmentReference* pDepthStencilAttachment;
   uint preserveAttachmentCount;
   uint* pPreserveAttachments;
}
struct SubpassDependency { 
   uint srcSubpass;
   uint dstSubpass;
   PipelineStageFlags srcStageMask;
   PipelineStageFlags dstStageMask;
   AccessFlags srcAccessMask;
   AccessFlags dstAccessMask;
   DependencyFlags dependencyFlags;
}
struct RenderPassCreateInfo { 
   StructureType sType;
   void* pNext;
   RenderPassCreateFlags flags;
   uint attachmentCount;
   AttachmentDescription* pAttachments;
   uint subpassCount;
   SubpassDescription* pSubpasses;
   uint dependencyCount;
   SubpassDependency* pDependencies;
}
struct EventCreateInfo { 
   StructureType sType;
   void* pNext;
   EventCreateFlags flags;
}
struct FenceCreateInfo { 
   StructureType sType;
   void* pNext;
   FenceCreateFlags flags;
}
struct PhysicalDeviceFeatures { 
   uint robustBufferAccess;
   uint fullDrawIndexUint32;
   uint imageCubeArray;
   uint independentBlend;
   uint geometryShader;
   uint tessellationShader;
   uint sampleRateShading;
   uint dualSrcBlend;
   uint logicOp;
   uint multiDrawIndirect;
   uint drawIndirectFirstInstance;
   uint depthClamp;
   uint depthBiasClamp;
   uint fillModeNonSolid;
   uint depthBounds;
   uint wideLines;
   uint largePoints;
   uint alphaToOne;
   uint multiViewport;
   uint samplerAnisotropy;
   uint textureCompressionETC2;
   uint textureCompressionASTC_LDR;
   uint textureCompressionBC;
   uint occlusionQueryPrecise;
   uint pipelineStatisticsQuery;
   uint vertexPipelineStoresAndAtomics;
   uint fragmentStoresAndAtomics;
   uint shaderTessellationAndGeometryPointSize;
   uint shaderImageGatherExtended;
   uint shaderStorageImageExtendedFormats;
   uint shaderStorageImageMultisample;
   uint shaderStorageImageReadWithoutFormat;
   uint shaderStorageImageWriteWithoutFormat;
   uint shaderUniformBufferArrayDynamicIndexing;
   uint shaderSampledImageArrayDynamicIndexing;
   uint shaderStorageBufferArrayDynamicIndexing;
   uint shaderStorageImageArrayDynamicIndexing;
   uint shaderClipDistance;
   uint shaderCullDistance;
   uint shaderFloat64;
   uint shaderInt64;
   uint shaderInt16;
   uint shaderResourceResidency;
   uint shaderResourceMinLod;
   uint sparseBinding;
   uint sparseResidencyBuffer;
   uint sparseResidencyImage2D;
   uint sparseResidencyImage3D;
   uint sparseResidency2Samples;
   uint sparseResidency4Samples;
   uint sparseResidency8Samples;
   uint sparseResidency16Samples;
   uint sparseResidencyAliased;
   uint variableMultisampleRate;
   uint inheritedQueries;
}
struct PhysicalDeviceSparseProperties { 
   uint residencyStandard2DBlockShape;
   uint residencyStandard2DMultisampleBlockShape;
   uint residencyStandard3DBlockShape;
   uint residencyAlignedMipSize;
   uint residencyNonResidentStrict;
}
struct PhysicalDeviceLimits { 
   uint maxImageDimension1D;
   uint maxImageDimension2D;
   uint maxImageDimension3D;
   uint maxImageDimensionCube;
   uint maxImageArrayLayers;
   uint maxTexelBufferElements;
   uint maxUniformBufferRange;
   uint maxStorageBufferRange;
   uint maxPushConstantsSize;
   uint maxMemoryAllocationCount;
   uint maxSamplerAllocationCount;
   DeviceSize bufferImageGranularity;
   DeviceSize sparseAddressSpaceSize;
   uint maxBoundDescriptorSets;
   uint maxPerStageDescriptorSamplers;
   uint maxPerStageDescriptorUniformBuffers;
   uint maxPerStageDescriptorStorageBuffers;
   uint maxPerStageDescriptorSampledImages;
   uint maxPerStageDescriptorStorageImages;
   uint maxPerStageDescriptorInputAttachments;
   uint maxPerStageResources;
   uint maxDescriptorSetSamplers;
   uint maxDescriptorSetUniformBuffers;
   uint maxDescriptorSetUniformBuffersDynamic;
   uint maxDescriptorSetStorageBuffers;
   uint maxDescriptorSetStorageBuffersDynamic;
   uint maxDescriptorSetSampledImages;
   uint maxDescriptorSetStorageImages;
   uint maxDescriptorSetInputAttachments;
   uint maxVertexInputAttributes;
   uint maxVertexInputBindings;
   uint maxVertexInputAttributeOffset;
   uint maxVertexInputBindingStride;
   uint maxVertexOutputComponents;
   uint maxTessellationGenerationLevel;
   uint maxTessellationPatchSize;
   uint maxTessellationControlPerVertexInputComponents;
   uint maxTessellationControlPerVertexOutputComponents;
   uint maxTessellationControlPerPatchOutputComponents;
   uint maxTessellationControlTotalOutputComponents;
   uint maxTessellationEvaluationInputComponents;
   uint maxTessellationEvaluationOutputComponents;
   uint maxGeometryShaderInvocations;
   uint maxGeometryInputComponents;
   uint maxGeometryOutputComponents;
   uint maxGeometryOutputVertices;
   uint maxGeometryTotalOutputComponents;
   uint maxFragmentInputComponents;
   uint maxFragmentOutputAttachments;
   uint maxFragmentDualSrcAttachments;
   uint maxFragmentCombinedOutputResources;
   uint maxComputeSharedMemorySize;
   uint[3] maxComputeWorkGroupCount;
   uint maxComputeWorkGroupInvocations;
   uint[3] maxComputeWorkGroupSize;
   uint subPixelPrecisionBits;
   uint subTexelPrecisionBits;
   uint mipmapPrecisionBits;
   uint maxDrawIndexedIndexValue;
   uint maxDrawIndirectCount;
   float maxSamplerLodBias;
   float maxSamplerAnisotropy;
   uint maxViewports;
   uint[2] maxViewportDimensions;
   float[2] viewportBoundsRange;
   uint viewportSubPixelBits;
   usz minMemoryMapAlignment;
   DeviceSize minTexelBufferOffsetAlignment;
   DeviceSize minUniformBufferOffsetAlignment;
   DeviceSize minStorageBufferOffsetAlignment;
   int minTexelOffset;
   uint maxTexelOffset;
   int minTexelGatherOffset;
   uint maxTexelGatherOffset;
   float minInterpolationOffset;
   float maxInterpolationOffset;
   uint subPixelInterpolationOffsetBits;
   uint maxFramebufferWidth;
   uint maxFramebufferHeight;
   uint maxFramebufferLayers;
   SampleCountFlags framebufferColorSampleCounts;
   SampleCountFlags framebufferDepthSampleCounts;
   SampleCountFlags framebufferStencilSampleCounts;
   SampleCountFlags framebufferNoAttachmentsSampleCounts;
   uint maxColorAttachments;
   SampleCountFlags sampledImageColorSampleCounts;
   SampleCountFlags sampledImageIntegerSampleCounts;
   SampleCountFlags sampledImageDepthSampleCounts;
   SampleCountFlags sampledImageStencilSampleCounts;
   SampleCountFlags storageImageSampleCounts;
   uint maxSampleMaskWords;
   uint timestampComputeAndGraphics;
   float timestampPeriod;
   uint maxClipDistances;
   uint maxCullDistances;
   uint maxCombinedClipAndCullDistances;
   uint discreteQueuePriorities;
   float[2] pointSizeRange;
   float[2] lineWidthRange;
   float pointSizeGranularity;
   float lineWidthGranularity;
   uint strictLines;
   uint standardSampleLocations;
   DeviceSize optimalBufferCopyOffsetAlignment;
   DeviceSize optimalBufferCopyRowPitchAlignment;
   DeviceSize nonCoherentAtomSize;
}
struct SemaphoreCreateInfo { 
   StructureType sType;
   void* pNext;
   SemaphoreCreateFlags flags;
}
struct QueryPoolCreateInfo { 
   StructureType sType;
   void* pNext;
   QueryPoolCreateFlags flags;
   QueryType queryType;
   uint queryCount;
   QueryPipelineStatisticFlags pipelineStatistics;
}
struct FramebufferCreateInfo { 
   StructureType sType;
   void* pNext;
   FramebufferCreateFlags flags;
   RenderPass renderPass;
   uint attachmentCount;
   ImageView* pAttachments;
   uint width;
   uint height;
   uint layers;
}
struct DrawIndirectCommand { 
   uint vertexCount;
   uint instanceCount;
   uint firstVertex;
   uint firstInstance;
}
struct DrawIndexedIndirectCommand { 
   uint indexCount;
   uint instanceCount;
   uint firstIndex;
   int vertexOffset;
   uint firstInstance;
}
struct DispatchIndirectCommand { 
   uint x;
   uint y;
   uint z;
}
struct SubmitInfo { 
   StructureType sType;
   void* pNext;
   uint waitSemaphoreCount;
   Semaphore* pWaitSemaphores;
   PipelineStageFlags* pWaitDstStageMask;
   uint commandBufferCount;
   CommandBuffer* pCommandBuffers;
   uint signalSemaphoreCount;
   Semaphore* pSignalSemaphores;
}
struct SurfaceCapabilitiesKHR { 
   uint minImageCount;
   uint maxImageCount;
   Extent2D currentExtent;
   Extent2D minImageExtent;
   Extent2D maxImageExtent;
   uint maxImageArrayLayers;
   SurfaceTransformFlagsKHR supportedTransforms;
   SurfaceTransformFlagBitsKHR currentTransform;
   CompositeAlphaFlagsKHR supportedCompositeAlpha;
   ImageUsageFlags supportedUsageFlags;
}
struct SurfaceFormatKHR { 
   Format format;
   ColorSpaceKHR colorSpace;
}
struct DevicePrivateDataCreateInfo { 
   StructureType sType;
   void* pNext;
   uint privateDataSlotRequestCount;
}
struct PrivateDataSlotCreateInfo { 
   StructureType sType;
   void* pNext;
   PrivateDataSlotCreateFlags flags;
}
struct PhysicalDevicePrivateDataFeatures { 
   StructureType sType;
   void* pNext;
   uint privateData;
}
struct PhysicalDeviceFeatures2 { 
   StructureType sType;
   void* pNext;
   PhysicalDeviceFeatures features;
}
struct PhysicalDeviceProperties2 { 
   StructureType sType;
   void* pNext;
   PhysicalDeviceProperties properties;
}
struct FormatProperties2 { 
   StructureType sType;
   void* pNext;
   FormatProperties formatProperties;
}
struct ImageFormatProperties2 { 
   StructureType sType;
   void* pNext;
   ImageFormatProperties imageFormatProperties;
}
struct PhysicalDeviceImageFormatInfo2 { 
   StructureType sType;
   void* pNext;
   Format format;
   ImageType type;
   ImageTiling tiling;
   ImageUsageFlags usage;
   ImageCreateFlags flags;
}
struct QueueFamilyProperties2 { 
   StructureType sType;
   void* pNext;
   QueueFamilyProperties queueFamilyProperties;
}
struct PhysicalDeviceMemoryProperties2 { 
   StructureType sType;
   void* pNext;
   PhysicalDeviceMemoryProperties memoryProperties;
}
struct SparseImageFormatProperties2 { 
   StructureType sType;
   void* pNext;
   SparseImageFormatProperties properties;
}
struct PhysicalDeviceSparseImageFormatInfo2 { 
   StructureType sType;
   void* pNext;
   Format format;
   ImageType type;
   SampleCountFlagBits samples;
   ImageUsageFlags usage;
   ImageTiling tiling;
}
struct ConformanceVersion { 
   uint major;
   uint minor;
   uint subminor;
   uint patch;
}
struct PhysicalDeviceDriverProperties { 
   StructureType sType;
   void* pNext;
   DriverId driverID;
   char[MAX_DRIVER_NAME_SIZE] driverName;
   char[MAX_DRIVER_INFO_SIZE] driverInfo;
   ConformanceVersion conformanceVersion;
}
struct PhysicalDeviceVariablePointersFeatures { 
   StructureType sType;
   void* pNext;
   uint variablePointersStorageBuffer;
   uint variablePointers;
}
struct ExternalMemoryProperties { 
   ExternalMemoryFeatureFlags externalMemoryFeatures;
   ExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
   ExternalMemoryHandleTypeFlags compatibleHandleTypes;
}
struct PhysicalDeviceExternalImageFormatInfo { 
   StructureType sType;
   void* pNext;
   ExternalMemoryHandleTypeFlagBits handleType;
}
struct ExternalImageFormatProperties { 
   StructureType sType;
   void* pNext;
   ExternalMemoryProperties externalMemoryProperties;
}
struct PhysicalDeviceExternalBufferInfo { 
   StructureType sType;
   void* pNext;
   BufferCreateFlags flags;
   BufferUsageFlags usage;
   ExternalMemoryHandleTypeFlagBits handleType;
}
struct ExternalBufferProperties { 
   StructureType sType;
   void* pNext;
   ExternalMemoryProperties externalMemoryProperties;
}
struct PhysicalDeviceIDProperties { 
   StructureType sType;
   void* pNext;
   uint[UUID_SIZE] deviceUUID;
   uint[UUID_SIZE] driverUUID;
   uint[LUID_SIZE] deviceLUID;
   uint deviceNodeMask;
   uint deviceLUIDValid;
}
struct ExternalMemoryImageCreateInfo { 
   StructureType sType;
   void* pNext;
   ExternalMemoryHandleTypeFlags handleTypes;
}
struct ExternalMemoryBufferCreateInfo { 
   StructureType sType;
   void* pNext;
   ExternalMemoryHandleTypeFlags handleTypes;
}
struct ExportMemoryAllocateInfo { 
   StructureType sType;
   void* pNext;
   ExternalMemoryHandleTypeFlags handleTypes;
}
struct PhysicalDeviceExternalSemaphoreInfo { 
   StructureType sType;
   void* pNext;
   ExternalSemaphoreHandleTypeFlagBits handleType;
}
struct ExternalSemaphoreProperties { 
   StructureType sType;
   void* pNext;
   ExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
   ExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
   ExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
}
struct ExportSemaphoreCreateInfo { 
   StructureType sType;
   void* pNext;
   ExternalSemaphoreHandleTypeFlags handleTypes;
}
struct PhysicalDeviceExternalFenceInfo { 
   StructureType sType;
   void* pNext;
   ExternalFenceHandleTypeFlagBits handleType;
}
struct ExternalFenceProperties { 
   StructureType sType;
   void* pNext;
   ExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
   ExternalFenceHandleTypeFlags compatibleHandleTypes;
   ExternalFenceFeatureFlags externalFenceFeatures;
}
struct ExportFenceCreateInfo { 
   StructureType sType;
   void* pNext;
   ExternalFenceHandleTypeFlags handleTypes;
}
struct PhysicalDeviceMultiviewFeatures { 
   StructureType sType;
   void* pNext;
   uint multiview;
   uint multiviewGeometryShader;
   uint multiviewTessellationShader;
}
struct PhysicalDeviceMultiviewProperties { 
   StructureType sType;
   void* pNext;
   uint maxMultiviewViewCount;
   uint maxMultiviewInstanceIndex;
}
struct RenderPassMultiviewCreateInfo { 
   StructureType sType;
   void* pNext;
   uint subpassCount;
   uint* pViewMasks;
   uint dependencyCount;
   int* pViewOffsets;
   uint correlationMaskCount;
   uint* pCorrelationMasks;
}
struct PhysicalDeviceGroupProperties { 
   StructureType sType;
   void* pNext;
   uint physicalDeviceCount;
   PhysicalDevice[MAX_DEVICE_GROUP_SIZE] physicalDevices;
   uint subsetAllocation;
}
struct MemoryAllocateFlagsInfo { 
   StructureType sType;
   void* pNext;
   MemoryAllocateFlags flags;
   uint deviceMask;
}
struct BindBufferMemoryInfo { 
   StructureType sType;
   void* pNext;
   Buffer buffer;
   DeviceMemory memory;
   DeviceSize memoryOffset;
}
struct BindBufferMemoryDeviceGroupInfo { 
   StructureType sType;
   void* pNext;
   uint deviceIndexCount;
   uint* pDeviceIndices;
}
struct BindImageMemoryInfo { 
   StructureType sType;
   void* pNext;
   Image image;
   DeviceMemory memory;
   DeviceSize memoryOffset;
}
struct BindImageMemoryDeviceGroupInfo { 
   StructureType sType;
   void* pNext;
   uint deviceIndexCount;
   uint* pDeviceIndices;
   uint splitInstanceBindRegionCount;
   Rect2D* pSplitInstanceBindRegions;
}
struct DeviceGroupRenderPassBeginInfo { 
   StructureType sType;
   void* pNext;
   uint deviceMask;
   uint deviceRenderAreaCount;
   Rect2D* pDeviceRenderAreas;
}
struct DeviceGroupCommandBufferBeginInfo { 
   StructureType sType;
   void* pNext;
   uint deviceMask;
}
struct DeviceGroupSubmitInfo { 
   StructureType sType;
   void* pNext;
   uint waitSemaphoreCount;
   uint* pWaitSemaphoreDeviceIndices;
   uint commandBufferCount;
   uint* pCommandBufferDeviceMasks;
   uint signalSemaphoreCount;
   uint* pSignalSemaphoreDeviceIndices;
}
struct DeviceGroupBindSparseInfo { 
   StructureType sType;
   void* pNext;
   uint resourceDeviceIndex;
   uint memoryDeviceIndex;
}
struct DeviceGroupDeviceCreateInfo { 
   StructureType sType;
   void* pNext;
   uint physicalDeviceCount;
   PhysicalDevice* pPhysicalDevices;
}
struct DescriptorUpdateTemplateEntry { 
   uint dstBinding;
   uint dstArrayElement;
   uint descriptorCount;
   DescriptorType descriptorType;
   usz offset;
   usz stride;
}
struct DescriptorUpdateTemplateCreateInfo { 
   StructureType sType;
   void* pNext;
   DescriptorUpdateTemplateCreateFlags flags;
   uint descriptorUpdateEntryCount;
   DescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
   DescriptorUpdateTemplateType templateType;
   DescriptorSetLayout descriptorSetLayout;
   PipelineBindPoint pipelineBindPoint;
   PipelineLayout pipelineLayout;
   uint set;
}
struct InputAttachmentAspectReference { 
   uint subpass;
   uint inputAttachmentIndex;
   ImageAspectFlags aspectMask;
}
struct RenderPassInputAttachmentAspectCreateInfo { 
   StructureType sType;
   void* pNext;
   uint aspectReferenceCount;
   InputAttachmentAspectReference* pAspectReferences;
}
struct PhysicalDevice16BitStorageFeatures { 
   StructureType sType;
   void* pNext;
   uint storageBuffer16BitAccess;
   uint uniformAndStorageBuffer16BitAccess;
   uint storagePushConstant16;
   uint storageInputOutput16;
}
struct PhysicalDeviceSubgroupProperties { 
   StructureType sType;
   void* pNext;
   uint subgroupSize;
   ShaderStageFlags supportedStages;
   SubgroupFeatureFlags supportedOperations;
   uint quadOperationsInAllStages;
}
struct PhysicalDeviceShaderSubgroupExtendedTypesFeatures { 
   StructureType sType;
   void* pNext;
   uint shaderSubgroupExtendedTypes;
}
struct BufferMemoryRequirementsInfo2 { 
   StructureType sType;
   void* pNext;
   Buffer buffer;
}
struct DeviceBufferMemoryRequirements { 
   StructureType sType;
   void* pNext;
   BufferCreateInfo* pCreateInfo;
}
struct ImageMemoryRequirementsInfo2 { 
   StructureType sType;
   void* pNext;
   Image image;
}
struct ImageSparseMemoryRequirementsInfo2 { 
   StructureType sType;
   void* pNext;
   Image image;
}
struct DeviceImageMemoryRequirements { 
   StructureType sType;
   void* pNext;
   ImageCreateInfo* pCreateInfo;
   ImageAspectFlagBits planeAspect;
}
struct MemoryRequirements2 { 
   StructureType sType;
   void* pNext;
   MemoryRequirements memoryRequirements;
}
struct SparseImageMemoryRequirements2 { 
   StructureType sType;
   void* pNext;
   SparseImageMemoryRequirements memoryRequirements;
}
struct PhysicalDevicePointClippingProperties { 
   StructureType sType;
   void* pNext;
   PointClippingBehavior pointClippingBehavior;
}
struct MemoryDedicatedRequirements { 
   StructureType sType;
   void* pNext;
   uint prefersDedicatedAllocation;
   uint requiresDedicatedAllocation;
}
struct MemoryDedicatedAllocateInfo { 
   StructureType sType;
   void* pNext;
   Image image;
   Buffer buffer;
}
struct ImageViewUsageCreateInfo { 
   StructureType sType;
   void* pNext;
   ImageUsageFlags usage;
}
struct PipelineTessellationDomainOriginStateCreateInfo { 
   StructureType sType;
   void* pNext;
   TessellationDomainOrigin domainOrigin;
}
struct SamplerYcbcrConversionInfo { 
   StructureType sType;
   void* pNext;
   SamplerYcbcrConversion conversion;
}
struct SamplerYcbcrConversionCreateInfo { 
   StructureType sType;
   void* pNext;
   Format format;
   SamplerYcbcrModelConversion ycbcrModel;
   SamplerYcbcrRange ycbcrRange;
   ComponentMapping components;
   ChromaLocation xChromaOffset;
   ChromaLocation yChromaOffset;
   Filter chromaFilter;
   uint forceExplicitReconstruction;
}
struct BindImagePlaneMemoryInfo { 
   StructureType sType;
   void* pNext;
   ImageAspectFlagBits planeAspect;
}
struct ImagePlaneMemoryRequirementsInfo { 
   StructureType sType;
   void* pNext;
   ImageAspectFlagBits planeAspect;
}
struct PhysicalDeviceSamplerYcbcrConversionFeatures { 
   StructureType sType;
   void* pNext;
   uint samplerYcbcrConversion;
}
struct SamplerYcbcrConversionImageFormatProperties { 
   StructureType sType;
   void* pNext;
   uint combinedImageSamplerDescriptorCount;
}
struct ProtectedSubmitInfo { 
   StructureType sType;
   void* pNext;
   uint protectedSubmit;
}
struct PhysicalDeviceProtectedMemoryFeatures { 
   StructureType sType;
   void* pNext;
   uint protectedMemory;
}
struct PhysicalDeviceProtectedMemoryProperties { 
   StructureType sType;
   void* pNext;
   uint protectedNoFault;
}
struct DeviceQueueInfo2 { 
   StructureType sType;
   void* pNext;
   DeviceQueueCreateFlags flags;
   uint queueFamilyIndex;
   uint queueIndex;
}
struct PhysicalDeviceSamplerFilterMinmaxProperties { 
   StructureType sType;
   void* pNext;
   uint filterMinmaxSingleComponentFormats;
   uint filterMinmaxImageComponentMapping;
}
struct SamplerReductionModeCreateInfo { 
   StructureType sType;
   void* pNext;
   SamplerReductionMode reductionMode;
}
struct PhysicalDeviceInlineUniformBlockFeatures { 
   StructureType sType;
   void* pNext;
   uint inlineUniformBlock;
   uint descriptorBindingInlineUniformBlockUpdateAfterBind;
}
struct PhysicalDeviceInlineUniformBlockProperties { 
   StructureType sType;
   void* pNext;
   uint maxInlineUniformBlockSize;
   uint maxPerStageDescriptorInlineUniformBlocks;
   uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
   uint maxDescriptorSetInlineUniformBlocks;
   uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
}
struct WriteDescriptorSetInlineUniformBlock { 
   StructureType sType;
   void* pNext;
   uint dataSize;
   void* pData;
}
struct DescriptorPoolInlineUniformBlockCreateInfo { 
   StructureType sType;
   void* pNext;
   uint maxInlineUniformBlockBindings;
}
struct ImageFormatListCreateInfo { 
   StructureType sType;
   void* pNext;
   uint viewFormatCount;
   Format* pViewFormats;
}
struct PhysicalDeviceMaintenance3Properties { 
   StructureType sType;
   void* pNext;
   uint maxPerSetDescriptors;
   DeviceSize maxMemoryAllocationSize;
}
struct PhysicalDeviceMaintenance4Features { 
   StructureType sType;
   void* pNext;
   uint maintenance4;
}
struct PhysicalDeviceMaintenance4Properties { 
   StructureType sType;
   void* pNext;
   DeviceSize maxBufferSize;
}
struct DescriptorSetLayoutSupport { 
   StructureType sType;
   void* pNext;
   uint supported;
}
struct PhysicalDeviceShaderDrawParametersFeatures { 
   StructureType sType;
   void* pNext;
   uint shaderDrawParameters;
}
struct PhysicalDeviceShaderFloat16Int8Features { 
   StructureType sType;
   void* pNext;
   uint shaderFloat16;
   uint shaderInt8;
}
struct PhysicalDeviceFloatControlsProperties { 
   StructureType sType;
   void* pNext;
   ShaderFloatControlsIndependence denormBehaviorIndependence;
   ShaderFloatControlsIndependence roundingModeIndependence;
   uint shaderSignedZeroInfNanPreserveFloat16;
   uint shaderSignedZeroInfNanPreserveFloat32;
   uint shaderSignedZeroInfNanPreserveFloat64;
   uint shaderDenormPreserveFloat16;
   uint shaderDenormPreserveFloat32;
   uint shaderDenormPreserveFloat64;
   uint shaderDenormFlushToZeroFloat16;
   uint shaderDenormFlushToZeroFloat32;
   uint shaderDenormFlushToZeroFloat64;
   uint shaderRoundingModeRTEFloat16;
   uint shaderRoundingModeRTEFloat32;
   uint shaderRoundingModeRTEFloat64;
   uint shaderRoundingModeRTZFloat16;
   uint shaderRoundingModeRTZFloat32;
   uint shaderRoundingModeRTZFloat64;
}
struct PhysicalDeviceHostQueryResetFeatures { 
   StructureType sType;
   void* pNext;
   uint hostQueryReset;
}
struct PhysicalDeviceDescriptorIndexingFeatures { 
   StructureType sType;
   void* pNext;
   uint shaderInputAttachmentArrayDynamicIndexing;
   uint shaderUniformTexelBufferArrayDynamicIndexing;
   uint shaderStorageTexelBufferArrayDynamicIndexing;
   uint shaderUniformBufferArrayNonUniformIndexing;
   uint shaderSampledImageArrayNonUniformIndexing;
   uint shaderStorageBufferArrayNonUniformIndexing;
   uint shaderStorageImageArrayNonUniformIndexing;
   uint shaderInputAttachmentArrayNonUniformIndexing;
   uint shaderUniformTexelBufferArrayNonUniformIndexing;
   uint shaderStorageTexelBufferArrayNonUniformIndexing;
   uint descriptorBindingUniformBufferUpdateAfterBind;
   uint descriptorBindingSampledImageUpdateAfterBind;
   uint descriptorBindingStorageImageUpdateAfterBind;
   uint descriptorBindingStorageBufferUpdateAfterBind;
   uint descriptorBindingUniformTexelBufferUpdateAfterBind;
   uint descriptorBindingStorageTexelBufferUpdateAfterBind;
   uint descriptorBindingUpdateUnusedWhilePending;
   uint descriptorBindingPartiallyBound;
   uint descriptorBindingVariableDescriptorCount;
   uint runtimeDescriptorArray;
}
struct PhysicalDeviceDescriptorIndexingProperties { 
   StructureType sType;
   void* pNext;
   uint maxUpdateAfterBindDescriptorsInAllPools;
   uint shaderUniformBufferArrayNonUniformIndexingNative;
   uint shaderSampledImageArrayNonUniformIndexingNative;
   uint shaderStorageBufferArrayNonUniformIndexingNative;
   uint shaderStorageImageArrayNonUniformIndexingNative;
   uint shaderInputAttachmentArrayNonUniformIndexingNative;
   uint robustBufferAccessUpdateAfterBind;
   uint quadDivergentImplicitLod;
   uint maxPerStageDescriptorUpdateAfterBindSamplers;
   uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
   uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
   uint maxPerStageDescriptorUpdateAfterBindSampledImages;
   uint maxPerStageDescriptorUpdateAfterBindStorageImages;
   uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
   uint maxPerStageUpdateAfterBindResources;
   uint maxDescriptorSetUpdateAfterBindSamplers;
   uint maxDescriptorSetUpdateAfterBindUniformBuffers;
   uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
   uint maxDescriptorSetUpdateAfterBindStorageBuffers;
   uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
   uint maxDescriptorSetUpdateAfterBindSampledImages;
   uint maxDescriptorSetUpdateAfterBindStorageImages;
   uint maxDescriptorSetUpdateAfterBindInputAttachments;
}
struct DescriptorSetLayoutBindingFlagsCreateInfo { 
   StructureType sType;
   void* pNext;
   uint bindingCount;
   DescriptorBindingFlags* pBindingFlags;
}
struct DescriptorSetVariableDescriptorCountAllocateInfo { 
   StructureType sType;
   void* pNext;
   uint descriptorSetCount;
   uint* pDescriptorCounts;
}
struct DescriptorSetVariableDescriptorCountLayoutSupport { 
   StructureType sType;
   void* pNext;
   uint maxVariableDescriptorCount;
}
struct AttachmentDescription2 { 
   StructureType sType;
   void* pNext;
   AttachmentDescriptionFlags flags;
   Format format;
   SampleCountFlagBits samples;
   AttachmentLoadOp loadOp;
   AttachmentStoreOp storeOp;
   AttachmentLoadOp stencilLoadOp;
   AttachmentStoreOp stencilStoreOp;
   ImageLayout initialLayout;
   ImageLayout finalLayout;
}
struct AttachmentReference2 { 
   StructureType sType;
   void* pNext;
   uint attachment;
   ImageLayout layout;
   ImageAspectFlags aspectMask;
}
struct SubpassDescription2 { 
   StructureType sType;
   void* pNext;
   SubpassDescriptionFlags flags;
   PipelineBindPoint pipelineBindPoint;
   uint viewMask;
   uint inputAttachmentCount;
   AttachmentReference2* pInputAttachments;
   uint colorAttachmentCount;
   AttachmentReference2* pColorAttachments;
   AttachmentReference2* pResolveAttachments;
   AttachmentReference2* pDepthStencilAttachment;
   uint preserveAttachmentCount;
   uint* pPreserveAttachments;
}
struct SubpassDependency2 { 
   StructureType sType;
   void* pNext;
   uint srcSubpass;
   uint dstSubpass;
   PipelineStageFlags srcStageMask;
   PipelineStageFlags dstStageMask;
   AccessFlags srcAccessMask;
   AccessFlags dstAccessMask;
   DependencyFlags dependencyFlags;
   int viewOffset;
}
struct RenderPassCreateInfo2 { 
   StructureType sType;
   void* pNext;
   RenderPassCreateFlags flags;
   uint attachmentCount;
   AttachmentDescription2* pAttachments;
   uint subpassCount;
   SubpassDescription2* pSubpasses;
   uint dependencyCount;
   SubpassDependency2* pDependencies;
   uint correlatedViewMaskCount;
   uint* pCorrelatedViewMasks;
}
struct SubpassBeginInfo { 
   StructureType sType;
   void* pNext;
   SubpassContents contents;
}
struct SubpassEndInfo { 
   StructureType sType;
   void* pNext;
}
struct PhysicalDeviceTimelineSemaphoreFeatures { 
   StructureType sType;
   void* pNext;
   uint timelineSemaphore;
}
struct PhysicalDeviceTimelineSemaphoreProperties { 
   StructureType sType;
   void* pNext;
   ulong maxTimelineSemaphoreValueDifference;
}
struct SemaphoreTypeCreateInfo { 
   StructureType sType;
   void* pNext;
   SemaphoreType semaphoreType;
   ulong initialValue;
}
struct TimelineSemaphoreSubmitInfo { 
   StructureType sType;
   void* pNext;
   uint waitSemaphoreValueCount;
   ulong* pWaitSemaphoreValues;
   uint signalSemaphoreValueCount;
   ulong* pSignalSemaphoreValues;
}
struct SemaphoreWaitInfo { 
   StructureType sType;
   void* pNext;
   SemaphoreWaitFlags flags;
   uint semaphoreCount;
   Semaphore* pSemaphores;
   ulong* pValues;
}
struct SemaphoreSignalInfo { 
   StructureType sType;
   void* pNext;
   Semaphore semaphore;
   ulong value;
}
struct PhysicalDevice8BitStorageFeatures { 
   StructureType sType;
   void* pNext;
   uint storageBuffer8BitAccess;
   uint uniformAndStorageBuffer8BitAccess;
   uint storagePushConstant8;
}
struct PhysicalDeviceVulkanMemoryModelFeatures { 
   StructureType sType;
   void* pNext;
   uint vulkanMemoryModel;
   uint vulkanMemoryModelDeviceScope;
   uint vulkanMemoryModelAvailabilityVisibilityChains;
}
struct PhysicalDeviceShaderAtomicInt64Features { 
   StructureType sType;
   void* pNext;
   uint shaderBufferInt64Atomics;
   uint shaderSharedInt64Atomics;
}
struct PhysicalDeviceDepthStencilResolveProperties { 
   StructureType sType;
   void* pNext;
   ResolveModeFlags supportedDepthResolveModes;
   ResolveModeFlags supportedStencilResolveModes;
   uint independentResolveNone;
   uint independentResolve;
}
struct SubpassDescriptionDepthStencilResolve { 
   StructureType sType;
   void* pNext;
   ResolveModeFlagBits depthResolveMode;
   ResolveModeFlagBits stencilResolveMode;
   AttachmentReference2* pDepthStencilResolveAttachment;
}
struct ImageStencilUsageCreateInfo { 
   StructureType sType;
   void* pNext;
   ImageUsageFlags stencilUsage;
}
struct PhysicalDeviceScalarBlockLayoutFeatures { 
   StructureType sType;
   void* pNext;
   uint scalarBlockLayout;
}
struct PhysicalDeviceUniformBufferStandardLayoutFeatures { 
   StructureType sType;
   void* pNext;
   uint uniformBufferStandardLayout;
}
struct PhysicalDeviceBufferDeviceAddressFeatures { 
   StructureType sType;
   void* pNext;
   uint bufferDeviceAddress;
   uint bufferDeviceAddressCaptureReplay;
   uint bufferDeviceAddressMultiDevice;
}
struct BufferDeviceAddressInfo { 
   StructureType sType;
   void* pNext;
   Buffer buffer;
}
struct BufferOpaqueCaptureAddressCreateInfo { 
   StructureType sType;
   void* pNext;
   ulong opaqueCaptureAddress;
}
struct PhysicalDeviceImagelessFramebufferFeatures { 
   StructureType sType;
   void* pNext;
   uint imagelessFramebuffer;
}
struct FramebufferAttachmentsCreateInfo { 
   StructureType sType;
   void* pNext;
   uint attachmentImageInfoCount;
   FramebufferAttachmentImageInfo* pAttachmentImageInfos;
}
struct FramebufferAttachmentImageInfo { 
   StructureType sType;
   void* pNext;
   ImageCreateFlags flags;
   ImageUsageFlags usage;
   uint width;
   uint height;
   uint layerCount;
   uint viewFormatCount;
   Format* pViewFormats;
}
struct RenderPassAttachmentBeginInfo { 
   StructureType sType;
   void* pNext;
   uint attachmentCount;
   ImageView* pAttachments;
}
struct PhysicalDeviceTextureCompressionASTCHDRFeatures { 
   StructureType sType;
   void* pNext;
   uint textureCompressionASTC_HDR;
}
struct PipelineCreationFeedback { 
   PipelineCreationFeedbackFlags flags;
   ulong duration;
}
struct PipelineCreationFeedbackCreateInfo { 
   StructureType sType;
   void* pNext;
   PipelineCreationFeedback* pPipelineCreationFeedback;
   uint pipelineStageCreationFeedbackCount;
   PipelineCreationFeedback* pPipelineStageCreationFeedbacks;
}
struct PhysicalDeviceSeparateDepthStencilLayoutsFeatures { 
   StructureType sType;
   void* pNext;
   uint separateDepthStencilLayouts;
}
struct AttachmentReferenceStencilLayout { 
   StructureType sType;
   void* pNext;
   ImageLayout stencilLayout;
}
struct AttachmentDescriptionStencilLayout { 
   StructureType sType;
   void* pNext;
   ImageLayout stencilInitialLayout;
   ImageLayout stencilFinalLayout;
}
struct PhysicalDeviceShaderDemoteToHelperInvocationFeatures { 
   StructureType sType;
   void* pNext;
   uint shaderDemoteToHelperInvocation;
}
struct PhysicalDeviceTexelBufferAlignmentProperties { 
   StructureType sType;
   void* pNext;
   DeviceSize storageTexelBufferOffsetAlignmentBytes;
   uint storageTexelBufferOffsetSingleTexelAlignment;
   DeviceSize uniformTexelBufferOffsetAlignmentBytes;
   uint uniformTexelBufferOffsetSingleTexelAlignment;
}
struct PhysicalDeviceSubgroupSizeControlFeatures { 
   StructureType sType;
   void* pNext;
   uint subgroupSizeControl;
   uint computeFullSubgroups;
}
struct PhysicalDeviceSubgroupSizeControlProperties { 
   StructureType sType;
   void* pNext;
   uint minSubgroupSize;
   uint maxSubgroupSize;
   uint maxComputeWorkgroupSubgroups;
   ShaderStageFlags requiredSubgroupSizeStages;
}
struct PipelineShaderStageRequiredSubgroupSizeCreateInfo { 
   StructureType sType;
   void* pNext;
   uint requiredSubgroupSize;
}
struct MemoryOpaqueCaptureAddressAllocateInfo { 
   StructureType sType;
   void* pNext;
   ulong opaqueCaptureAddress;
}
struct DeviceMemoryOpaqueCaptureAddressInfo { 
   StructureType sType;
   void* pNext;
   DeviceMemory memory;
}
struct PhysicalDevicePipelineCreationCacheControlFeatures { 
   StructureType sType;
   void* pNext;
   uint pipelineCreationCacheControl;
}
struct PhysicalDeviceVulkan11Features { 
   StructureType sType;
   void* pNext;
   uint storageBuffer16BitAccess;
   uint uniformAndStorageBuffer16BitAccess;
   uint storagePushConstant16;
   uint storageInputOutput16;
   uint multiview;
   uint multiviewGeometryShader;
   uint multiviewTessellationShader;
   uint variablePointersStorageBuffer;
   uint variablePointers;
   uint protectedMemory;
   uint samplerYcbcrConversion;
   uint shaderDrawParameters;
}
struct PhysicalDeviceVulkan11Properties { 
   StructureType sType;
   void* pNext;
   uint[UUID_SIZE] deviceUUID;
   uint[UUID_SIZE] driverUUID;
   uint[LUID_SIZE] deviceLUID;
   uint deviceNodeMask;
   uint deviceLUIDValid;
   uint subgroupSize;
   ShaderStageFlags subgroupSupportedStages;
   SubgroupFeatureFlags subgroupSupportedOperations;
   uint subgroupQuadOperationsInAllStages;
   PointClippingBehavior pointClippingBehavior;
   uint maxMultiviewViewCount;
   uint maxMultiviewInstanceIndex;
   uint protectedNoFault;
   uint maxPerSetDescriptors;
   DeviceSize maxMemoryAllocationSize;
}
struct PhysicalDeviceVulkan12Features { 
   StructureType sType;
   void* pNext;
   uint samplerMirrorClampToEdge;
   uint drawIndirectCount;
   uint storageBuffer8BitAccess;
   uint uniformAndStorageBuffer8BitAccess;
   uint storagePushConstant8;
   uint shaderBufferInt64Atomics;
   uint shaderSharedInt64Atomics;
   uint shaderFloat16;
   uint shaderInt8;
   uint descriptorIndexing;
   uint shaderInputAttachmentArrayDynamicIndexing;
   uint shaderUniformTexelBufferArrayDynamicIndexing;
   uint shaderStorageTexelBufferArrayDynamicIndexing;
   uint shaderUniformBufferArrayNonUniformIndexing;
   uint shaderSampledImageArrayNonUniformIndexing;
   uint shaderStorageBufferArrayNonUniformIndexing;
   uint shaderStorageImageArrayNonUniformIndexing;
   uint shaderInputAttachmentArrayNonUniformIndexing;
   uint shaderUniformTexelBufferArrayNonUniformIndexing;
   uint shaderStorageTexelBufferArrayNonUniformIndexing;
   uint descriptorBindingUniformBufferUpdateAfterBind;
   uint descriptorBindingSampledImageUpdateAfterBind;
   uint descriptorBindingStorageImageUpdateAfterBind;
   uint descriptorBindingStorageBufferUpdateAfterBind;
   uint descriptorBindingUniformTexelBufferUpdateAfterBind;
   uint descriptorBindingStorageTexelBufferUpdateAfterBind;
   uint descriptorBindingUpdateUnusedWhilePending;
   uint descriptorBindingPartiallyBound;
   uint descriptorBindingVariableDescriptorCount;
   uint runtimeDescriptorArray;
   uint samplerFilterMinmax;
   uint scalarBlockLayout;
   uint imagelessFramebuffer;
   uint uniformBufferStandardLayout;
   uint shaderSubgroupExtendedTypes;
   uint separateDepthStencilLayouts;
   uint hostQueryReset;
   uint timelineSemaphore;
   uint bufferDeviceAddress;
   uint bufferDeviceAddressCaptureReplay;
   uint bufferDeviceAddressMultiDevice;
   uint vulkanMemoryModel;
   uint vulkanMemoryModelDeviceScope;
   uint vulkanMemoryModelAvailabilityVisibilityChains;
   uint shaderOutputViewportIndex;
   uint shaderOutputLayer;
   uint subgroupBroadcastDynamicId;
}
struct PhysicalDeviceVulkan12Properties { 
   StructureType sType;
   void* pNext;
   DriverId driverID;
   char[MAX_DRIVER_NAME_SIZE] driverName;
   char[MAX_DRIVER_INFO_SIZE] driverInfo;
   ConformanceVersion conformanceVersion;
   ShaderFloatControlsIndependence denormBehaviorIndependence;
   ShaderFloatControlsIndependence roundingModeIndependence;
   uint shaderSignedZeroInfNanPreserveFloat16;
   uint shaderSignedZeroInfNanPreserveFloat32;
   uint shaderSignedZeroInfNanPreserveFloat64;
   uint shaderDenormPreserveFloat16;
   uint shaderDenormPreserveFloat32;
   uint shaderDenormPreserveFloat64;
   uint shaderDenormFlushToZeroFloat16;
   uint shaderDenormFlushToZeroFloat32;
   uint shaderDenormFlushToZeroFloat64;
   uint shaderRoundingModeRTEFloat16;
   uint shaderRoundingModeRTEFloat32;
   uint shaderRoundingModeRTEFloat64;
   uint shaderRoundingModeRTZFloat16;
   uint shaderRoundingModeRTZFloat32;
   uint shaderRoundingModeRTZFloat64;
   uint maxUpdateAfterBindDescriptorsInAllPools;
   uint shaderUniformBufferArrayNonUniformIndexingNative;
   uint shaderSampledImageArrayNonUniformIndexingNative;
   uint shaderStorageBufferArrayNonUniformIndexingNative;
   uint shaderStorageImageArrayNonUniformIndexingNative;
   uint shaderInputAttachmentArrayNonUniformIndexingNative;
   uint robustBufferAccessUpdateAfterBind;
   uint quadDivergentImplicitLod;
   uint maxPerStageDescriptorUpdateAfterBindSamplers;
   uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
   uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
   uint maxPerStageDescriptorUpdateAfterBindSampledImages;
   uint maxPerStageDescriptorUpdateAfterBindStorageImages;
   uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
   uint maxPerStageUpdateAfterBindResources;
   uint maxDescriptorSetUpdateAfterBindSamplers;
   uint maxDescriptorSetUpdateAfterBindUniformBuffers;
   uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
   uint maxDescriptorSetUpdateAfterBindStorageBuffers;
   uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
   uint maxDescriptorSetUpdateAfterBindSampledImages;
   uint maxDescriptorSetUpdateAfterBindStorageImages;
   uint maxDescriptorSetUpdateAfterBindInputAttachments;
   ResolveModeFlags supportedDepthResolveModes;
   ResolveModeFlags supportedStencilResolveModes;
   uint independentResolveNone;
   uint independentResolve;
   uint filterMinmaxSingleComponentFormats;
   uint filterMinmaxImageComponentMapping;
   ulong maxTimelineSemaphoreValueDifference;
   SampleCountFlags framebufferIntegerColorSampleCounts;
}
struct PhysicalDeviceVulkan13Features { 
   StructureType sType;
   void* pNext;
   uint robustImageAccess;
   uint inlineUniformBlock;
   uint descriptorBindingInlineUniformBlockUpdateAfterBind;
   uint pipelineCreationCacheControl;
   uint privateData;
   uint shaderDemoteToHelperInvocation;
   uint shaderTerminateInvocation;
   uint subgroupSizeControl;
   uint computeFullSubgroups;
   uint synchronization2;
   uint textureCompressionASTC_HDR;
   uint shaderZeroInitializeWorkgroupMemory;
   uint dynamicRendering;
   uint shaderIntegerDotProduct;
   uint maintenance4;
}
struct PhysicalDeviceVulkan13Properties { 
   StructureType sType;
   void* pNext;
   uint minSubgroupSize;
   uint maxSubgroupSize;
   uint maxComputeWorkgroupSubgroups;
   ShaderStageFlags requiredSubgroupSizeStages;
   uint maxInlineUniformBlockSize;
   uint maxPerStageDescriptorInlineUniformBlocks;
   uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
   uint maxDescriptorSetInlineUniformBlocks;
   uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
   uint maxInlineUniformTotalSize;
   uint integerDotProduct8BitUnsignedAccelerated;
   uint integerDotProduct8BitSignedAccelerated;
   uint integerDotProduct8BitMixedSignednessAccelerated;
   uint integerDotProduct4x8BitPackedUnsignedAccelerated;
   uint integerDotProduct4x8BitPackedSignedAccelerated;
   uint integerDotProduct4x8BitPackedMixedSignednessAccelerated;
   uint integerDotProduct16BitUnsignedAccelerated;
   uint integerDotProduct16BitSignedAccelerated;
   uint integerDotProduct16BitMixedSignednessAccelerated;
   uint integerDotProduct32BitUnsignedAccelerated;
   uint integerDotProduct32BitSignedAccelerated;
   uint integerDotProduct32BitMixedSignednessAccelerated;
   uint integerDotProduct64BitUnsignedAccelerated;
   uint integerDotProduct64BitSignedAccelerated;
   uint integerDotProduct64BitMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating8BitSignedAccelerated;
   uint integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
   uint integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating16BitSignedAccelerated;
   uint integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating32BitSignedAccelerated;
   uint integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating64BitSignedAccelerated;
   uint integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
   DeviceSize storageTexelBufferOffsetAlignmentBytes;
   uint storageTexelBufferOffsetSingleTexelAlignment;
   DeviceSize uniformTexelBufferOffsetAlignmentBytes;
   uint uniformTexelBufferOffsetSingleTexelAlignment;
   DeviceSize maxBufferSize;
}
struct PhysicalDeviceToolProperties { 
   StructureType sType;
   void* pNext;
   char[MAX_EXTENSION_NAME_SIZE] name;
   char[MAX_EXTENSION_NAME_SIZE] version;
   ToolPurposeFlags purposes;
   char[MAX_DESCRIPTION_SIZE] description;
   char[MAX_EXTENSION_NAME_SIZE] layer;
}
struct PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures { 
   StructureType sType;
   void* pNext;
   uint shaderZeroInitializeWorkgroupMemory;
}
struct PhysicalDeviceImageRobustnessFeatures { 
   StructureType sType;
   void* pNext;
   uint robustImageAccess;
}
struct BufferCopy2 { 
   StructureType sType;
   void* pNext;
   DeviceSize srcOffset;
   DeviceSize dstOffset;
   DeviceSize size;
}
struct ImageCopy2 { 
   StructureType sType;
   void* pNext;
   ImageSubresourceLayers srcSubresource;
   Offset3D srcOffset;
   ImageSubresourceLayers dstSubresource;
   Offset3D dstOffset;
   Extent3D extent;
}
struct ImageBlit2 { 
   StructureType sType;
   void* pNext;
   ImageSubresourceLayers srcSubresource;
   Offset3D[2] srcOffsets;
   ImageSubresourceLayers dstSubresource;
   Offset3D[2] dstOffsets;
}
struct BufferImageCopy2 { 
   StructureType sType;
   void* pNext;
   DeviceSize bufferOffset;
   uint bufferRowLength;
   uint bufferImageHeight;
   ImageSubresourceLayers imageSubresource;
   Offset3D imageOffset;
   Extent3D imageExtent;
}
struct ImageResolve2 { 
   StructureType sType;
   void* pNext;
   ImageSubresourceLayers srcSubresource;
   Offset3D srcOffset;
   ImageSubresourceLayers dstSubresource;
   Offset3D dstOffset;
   Extent3D extent;
}
struct CopyBufferInfo2 { 
   StructureType sType;
   void* pNext;
   Buffer srcBuffer;
   Buffer dstBuffer;
   uint regionCount;
   BufferCopy2* pRegions;
}
struct CopyImageInfo2 { 
   StructureType sType;
   void* pNext;
   Image srcImage;
   ImageLayout srcImageLayout;
   Image dstImage;
   ImageLayout dstImageLayout;
   uint regionCount;
   ImageCopy2* pRegions;
}
struct BlitImageInfo2 { 
   StructureType sType;
   void* pNext;
   Image srcImage;
   ImageLayout srcImageLayout;
   Image dstImage;
   ImageLayout dstImageLayout;
   uint regionCount;
   ImageBlit2* pRegions;
   Filter filter;
}
struct CopyBufferToImageInfo2 { 
   StructureType sType;
   void* pNext;
   Buffer srcBuffer;
   Image dstImage;
   ImageLayout dstImageLayout;
   uint regionCount;
   BufferImageCopy2* pRegions;
}
struct CopyImageToBufferInfo2 { 
   StructureType sType;
   void* pNext;
   Image srcImage;
   ImageLayout srcImageLayout;
   Buffer dstBuffer;
   uint regionCount;
   BufferImageCopy2* pRegions;
}
struct ResolveImageInfo2 { 
   StructureType sType;
   void* pNext;
   Image srcImage;
   ImageLayout srcImageLayout;
   Image dstImage;
   ImageLayout dstImageLayout;
   uint regionCount;
   ImageResolve2* pRegions;
}
struct PhysicalDeviceShaderTerminateInvocationFeatures { 
   StructureType sType;
   void* pNext;
   uint shaderTerminateInvocation;
}
struct MemoryBarrier2 { 
   StructureType sType;
   void* pNext;
   PipelineStageFlags2 srcStageMask;
   AccessFlags2 srcAccessMask;
   PipelineStageFlags2 dstStageMask;
   AccessFlags2 dstAccessMask;
}
struct ImageMemoryBarrier2 { 
   StructureType sType;
   void* pNext;
   PipelineStageFlags2 srcStageMask;
   AccessFlags2 srcAccessMask;
   PipelineStageFlags2 dstStageMask;
   AccessFlags2 dstAccessMask;
   ImageLayout oldLayout;
   ImageLayout newLayout;
   uint srcQueueFamilyIndex;
   uint dstQueueFamilyIndex;
   Image image;
   ImageSubresourceRange subresourceRange;
}
struct BufferMemoryBarrier2 { 
   StructureType sType;
   void* pNext;
   PipelineStageFlags2 srcStageMask;
   AccessFlags2 srcAccessMask;
   PipelineStageFlags2 dstStageMask;
   AccessFlags2 dstAccessMask;
   uint srcQueueFamilyIndex;
   uint dstQueueFamilyIndex;
   Buffer buffer;
   DeviceSize offset;
   DeviceSize size;
}
struct DependencyInfo { 
   StructureType sType;
   void* pNext;
   DependencyFlags dependencyFlags;
   uint memoryBarrierCount;
   MemoryBarrier2* pMemoryBarriers;
   uint bufferMemoryBarrierCount;
   BufferMemoryBarrier2* pBufferMemoryBarriers;
   uint imageMemoryBarrierCount;
   ImageMemoryBarrier2* pImageMemoryBarriers;
}
struct SemaphoreSubmitInfo { 
   StructureType sType;
   void* pNext;
   Semaphore semaphore;
   ulong value;
   PipelineStageFlags2 stageMask;
   uint deviceIndex;
}
struct CommandBufferSubmitInfo { 
   StructureType sType;
   void* pNext;
   CommandBuffer commandBuffer;
   uint deviceMask;
}
struct SubmitInfo2 { 
   StructureType sType;
   void* pNext;
   SubmitFlags flags;
   uint waitSemaphoreInfoCount;
   SemaphoreSubmitInfo* pWaitSemaphoreInfos;
   uint commandBufferInfoCount;
   CommandBufferSubmitInfo* pCommandBufferInfos;
   uint signalSemaphoreInfoCount;
   SemaphoreSubmitInfo* pSignalSemaphoreInfos;
}
struct PhysicalDeviceSynchronization2Features { 
   StructureType sType;
   void* pNext;
   uint synchronization2;
}
struct PhysicalDeviceShaderIntegerDotProductFeatures { 
   StructureType sType;
   void* pNext;
   uint shaderIntegerDotProduct;
}
struct PhysicalDeviceShaderIntegerDotProductProperties { 
   StructureType sType;
   void* pNext;
   uint integerDotProduct8BitUnsignedAccelerated;
   uint integerDotProduct8BitSignedAccelerated;
   uint integerDotProduct8BitMixedSignednessAccelerated;
   uint integerDotProduct4x8BitPackedUnsignedAccelerated;
   uint integerDotProduct4x8BitPackedSignedAccelerated;
   uint integerDotProduct4x8BitPackedMixedSignednessAccelerated;
   uint integerDotProduct16BitUnsignedAccelerated;
   uint integerDotProduct16BitSignedAccelerated;
   uint integerDotProduct16BitMixedSignednessAccelerated;
   uint integerDotProduct32BitUnsignedAccelerated;
   uint integerDotProduct32BitSignedAccelerated;
   uint integerDotProduct32BitMixedSignednessAccelerated;
   uint integerDotProduct64BitUnsignedAccelerated;
   uint integerDotProduct64BitSignedAccelerated;
   uint integerDotProduct64BitMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating8BitSignedAccelerated;
   uint integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
   uint integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating16BitSignedAccelerated;
   uint integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating32BitSignedAccelerated;
   uint integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
   uint integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
   uint integerDotProductAccumulatingSaturating64BitSignedAccelerated;
   uint integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
}
struct FormatProperties3 { 
   StructureType sType;
   void* pNext;
   FormatFeatureFlags2 linearTilingFeatures;
   FormatFeatureFlags2 optimalTilingFeatures;
   FormatFeatureFlags2 bufferFeatures;
}
struct PipelineRenderingCreateInfo { 
   StructureType sType;
   void* pNext;
   uint viewMask;
   uint colorAttachmentCount;
   Format* pColorAttachmentFormats;
   Format depthAttachmentFormat;
   Format stencilAttachmentFormat;
}
struct RenderingInfo { 
   StructureType sType;
   void* pNext;
   RenderingFlags flags;
   Rect2D renderArea;
   uint layerCount;
   uint viewMask;
   uint colorAttachmentCount;
   RenderingAttachmentInfo* pColorAttachments;
   RenderingAttachmentInfo* pDepthAttachment;
   RenderingAttachmentInfo* pStencilAttachment;
}
struct RenderingAttachmentInfo { 
   StructureType sType;
   void* pNext;
   ImageView imageView;
   ImageLayout imageLayout;
   ResolveModeFlagBits resolveMode;
   ImageView resolveImageView;
   ImageLayout resolveImageLayout;
   AttachmentLoadOp loadOp;
   AttachmentStoreOp storeOp;
   ClearValue clearValue;
}
struct PhysicalDeviceDynamicRenderingFeatures { 
   StructureType sType;
   void* pNext;
   uint dynamicRendering;
}
struct CommandBufferInheritanceRenderingInfo { 
   StructureType sType;
   void* pNext;
   RenderingFlags flags;
   uint viewMask;
   uint colorAttachmentCount;
   uint colorAttachmentCount;
   Format* pColorAttachmentFormats;
   Format depthAttachmentFormat;
   Format stencilAttachmentFormat;
   SampleCountFlagBits rasterizationSamples;
}

union ClearColorValue { 
   float[4] float32;
   int[4] int32;
   uint[4] uint32;
}
union ClearValue { 
   ClearColorValue color;
   ClearDepthStencilValue depthStencil;
}
union PerformanceCounterResultKHR { 
   int int32;
   long int64;
   uint uint32;
   ulong uint64;
   float float32;
   double float64;
}
union PerformanceValueDataINTEL { 
   uint value32;
   ulong value64;
   float valueFloat;
   uint valueBool;
   char* valueString;
}
union PipelineExecutableStatisticValueKHR { 
   uint b32;
   long i64;
   ulong u64;
   double f64;
}
union DeviceOrHostAddressKHR { 
   DeviceAddress deviceAddress;
   void* hostAddress;
}
union DeviceOrHostAddressConstKHR { 
   DeviceAddress deviceAddress;
   void* hostAddress;
}
union DeviceOrHostAddressConstAMDX { 
   DeviceAddress deviceAddress;
   void* hostAddress;
}
union AccelerationStructureGeometryDataKHR { 
   AccelerationStructureGeometryTrianglesDataKHR triangles;
   AccelerationStructureGeometryAabbsDataKHR aabbs;
   AccelerationStructureGeometryInstancesDataKHR instances;
}
union DescriptorDataEXT { 
   Sampler* pSampler;
   DescriptorImageInfo* pCombinedImageSampler;
   DescriptorImageInfo* pInputAttachmentImage;
   DescriptorImageInfo* pSampledImage;
   DescriptorImageInfo* pStorageImage;
   DescriptorAddressInfoEXT* pUniformTexelBuffer;
   DescriptorAddressInfoEXT* pStorageTexelBuffer;
   DescriptorAddressInfoEXT* pUniformBuffer;
   DescriptorAddressInfoEXT* pStorageBuffer;
   DeviceAddress accelerationStructure;
}
union AccelerationStructureMotionInstanceDataNV { 
   AccelerationStructureInstanceKHR staticInstance;
   AccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
   AccelerationStructureSRTMotionInstanceNV srtMotionInstance;
}
extern fn Result vkCreateInstance (InstanceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Instance* pInstance) @extern("vkCreateInstance"); 
extern fn void destroyInstance (Instance instance, AllocationCallbacks* pAllocator) @extern("vkDestroyInstance"); 
extern fn Result vkEnumeratePhysicalDevices (Instance instance, uint* pPhysicalDeviceCount, PhysicalDevice* pPhysicalDevices) @extern("vkEnumeratePhysicalDevices"); 
extern fn PFN_vkVoidFunction vkGetDeviceProcAddr (Device device, char* pName) @extern("vkGetDeviceProcAddr"); 
extern fn PFN_vkVoidFunction vkGetInstanceProcAddr (Instance instance, char* pName) @extern("vkGetInstanceProcAddr"); 
extern fn void getPhysicalDeviceProperties (PhysicalDevice physicalDevice, PhysicalDeviceProperties* pProperties) @extern("vkGetPhysicalDeviceProperties"); 
extern fn void getPhysicalDeviceQueueFamilyProperties (PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, QueueFamilyProperties* pQueueFamilyProperties) @extern("vkGetPhysicalDeviceQueueFamilyProperties"); 
extern fn void getPhysicalDeviceMemoryProperties (PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties* pMemoryProperties) @extern("vkGetPhysicalDeviceMemoryProperties"); 
extern fn void getPhysicalDeviceFeatures (PhysicalDevice physicalDevice, PhysicalDeviceFeatures* pFeatures) @extern("vkGetPhysicalDeviceFeatures"); 
extern fn void getPhysicalDeviceFormatProperties (PhysicalDevice physicalDevice, Format format, FormatProperties* pFormatProperties) @extern("vkGetPhysicalDeviceFormatProperties"); 
extern fn Result vkGetPhysicalDeviceImageFormatProperties (PhysicalDevice physicalDevice, Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags, ImageFormatProperties* pImageFormatProperties) @extern("vkGetPhysicalDeviceImageFormatProperties"); 
extern fn Result vkCreateDevice (PhysicalDevice physicalDevice, DeviceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Device* pDevice) @extern("vkCreateDevice"); 
extern fn void destroyDevice (Device device, AllocationCallbacks* pAllocator) @extern("vkDestroyDevice"); 
extern fn Result vkEnumerateInstanceVersion (uint* pApiVersion) @extern("vkEnumerateInstanceVersion"); 
extern fn Result vkEnumerateInstanceLayerProperties (uint* pPropertyCount, LayerProperties* pProperties) @extern("vkEnumerateInstanceLayerProperties"); 
extern fn Result vkEnumerateInstanceExtensionProperties (char* pLayerName, uint* pPropertyCount, ExtensionProperties* pProperties) @extern("vkEnumerateInstanceExtensionProperties"); 
extern fn Result vkEnumerateDeviceLayerProperties (PhysicalDevice physicalDevice, uint* pPropertyCount, LayerProperties* pProperties) @extern("vkEnumerateDeviceLayerProperties"); 
extern fn Result vkEnumerateDeviceExtensionProperties (PhysicalDevice physicalDevice, char* pLayerName, uint* pPropertyCount, ExtensionProperties* pProperties) @extern("vkEnumerateDeviceExtensionProperties"); 
extern fn void getDeviceQueue (Device device, uint queueFamilyIndex, uint queueIndex, Queue* pQueue) @extern("vkGetDeviceQueue"); 
extern fn Result vkQueueSubmit (Queue queue, uint submitCount, SubmitInfo* pSubmits, Fence fence) @extern("vkQueueSubmit"); 
extern fn Result vkQueueWaitIdle (Queue queue) @extern("vkQueueWaitIdle"); 
extern fn Result vkDeviceWaitIdle (Device device) @extern("vkDeviceWaitIdle"); 
extern fn Result vkAllocateMemory (Device device, MemoryAllocateInfo* pAllocateInfo, AllocationCallbacks* pAllocator, DeviceMemory* pMemory) @extern("vkAllocateMemory"); 
extern fn void freeMemory (Device device, DeviceMemory memory, AllocationCallbacks* pAllocator) @extern("vkFreeMemory"); 
extern fn Result vkMapMemory (Device device, DeviceMemory memory, DeviceSize offset, DeviceSize size, MemoryMapFlags flags, void** ppData) @extern("vkMapMemory"); 
extern fn void unmapMemory (Device device, DeviceMemory memory) @extern("vkUnmapMemory"); 
extern fn Result vkFlushMappedMemoryRanges (Device device, uint memoryRangeCount, MappedMemoryRange* pMemoryRanges) @extern("vkFlushMappedMemoryRanges"); 
extern fn Result vkInvalidateMappedMemoryRanges (Device device, uint memoryRangeCount, MappedMemoryRange* pMemoryRanges) @extern("vkInvalidateMappedMemoryRanges"); 
extern fn void getDeviceMemoryCommitment (Device device, DeviceMemory memory, DeviceSize* pCommittedMemoryInBytes) @extern("vkGetDeviceMemoryCommitment"); 
extern fn void getBufferMemoryRequirements (Device device, Buffer buffer, MemoryRequirements* pMemoryRequirements) @extern("vkGetBufferMemoryRequirements"); 
extern fn Result vkBindBufferMemory (Device device, Buffer buffer, DeviceMemory memory, DeviceSize memoryOffset) @extern("vkBindBufferMemory"); 
extern fn void getImageMemoryRequirements (Device device, Image image, MemoryRequirements* pMemoryRequirements) @extern("vkGetImageMemoryRequirements"); 
extern fn Result vkBindImageMemory (Device device, Image image, DeviceMemory memory, DeviceSize memoryOffset) @extern("vkBindImageMemory"); 
extern fn void getImageSparseMemoryRequirements (Device device, Image image, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements* pSparseMemoryRequirements) @extern("vkGetImageSparseMemoryRequirements"); 
extern fn void getPhysicalDeviceSparseImageFormatProperties (PhysicalDevice physicalDevice, Format format, ImageType type, SampleCountFlagBits samples, ImageUsageFlags usage, ImageTiling tiling, uint* pPropertyCount, SparseImageFormatProperties* pProperties) @extern("vkGetPhysicalDeviceSparseImageFormatProperties"); 
extern fn Result vkQueueBindSparse (Queue queue, uint bindInfoCount, BindSparseInfo* pBindInfo, Fence fence) @extern("vkQueueBindSparse"); 
extern fn Result vkCreateFence (Device device, FenceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Fence* pFence) @extern("vkCreateFence"); 
extern fn void destroyFence (Device device, Fence fence, AllocationCallbacks* pAllocator) @extern("vkDestroyFence"); 
extern fn Result vkResetFences (Device device, uint fenceCount, Fence* pFences) @extern("vkResetFences"); 
extern fn Result vkGetFenceStatus (Device device, Fence fence) @extern("vkGetFenceStatus"); 
extern fn Result vkWaitForFences (Device device, uint fenceCount, Fence* pFences, uint waitAll, ulong timeout) @extern("vkWaitForFences"); 
extern fn Result vkCreateSemaphore (Device device, SemaphoreCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Semaphore* pSemaphore) @extern("vkCreateSemaphore"); 
extern fn void destroySemaphore (Device device, Semaphore semaphore, AllocationCallbacks* pAllocator) @extern("vkDestroySemaphore"); 
extern fn Result vkCreateEvent (Device device, EventCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Event* pEvent) @extern("vkCreateEvent"); 
extern fn void destroyEvent (Device device, Event event, AllocationCallbacks* pAllocator) @extern("vkDestroyEvent"); 
extern fn Result vkGetEventStatus (Device device, Event event) @extern("vkGetEventStatus"); 
extern fn Result vkSetEvent (Device device, Event event) @extern("vkSetEvent"); 
extern fn Result vkResetEvent (Device device, Event event) @extern("vkResetEvent"); 
extern fn Result vkCreateQueryPool (Device device, QueryPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, QueryPool* pQueryPool) @extern("vkCreateQueryPool"); 
extern fn void destroyQueryPool (Device device, QueryPool queryPool, AllocationCallbacks* pAllocator) @extern("vkDestroyQueryPool"); 
extern fn Result vkGetQueryPoolResults (Device device, QueryPool queryPool, uint firstQuery, uint queryCount, usz dataSize, void* pData, DeviceSize stride, QueryResultFlags flags) @extern("vkGetQueryPoolResults"); 
extern fn void resetQueryPool (Device device, QueryPool queryPool, uint firstQuery, uint queryCount) @extern("vkResetQueryPool"); 
extern fn Result vkCreateBuffer (Device device, BufferCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Buffer* pBuffer) @extern("vkCreateBuffer"); 
extern fn void destroyBuffer (Device device, Buffer buffer, AllocationCallbacks* pAllocator) @extern("vkDestroyBuffer"); 
extern fn Result vkCreateBufferView (Device device, BufferViewCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, BufferView* pView) @extern("vkCreateBufferView"); 
extern fn void destroyBufferView (Device device, BufferView bufferView, AllocationCallbacks* pAllocator) @extern("vkDestroyBufferView"); 
extern fn Result vkCreateImage (Device device, ImageCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Image* pImage) @extern("vkCreateImage"); 
extern fn void destroyImage (Device device, Image image, AllocationCallbacks* pAllocator) @extern("vkDestroyImage"); 
extern fn void getImageSubresourceLayout (Device device, Image image, ImageSubresource* pSubresource, SubresourceLayout* pLayout) @extern("vkGetImageSubresourceLayout"); 
extern fn Result vkCreateImageView (Device device, ImageViewCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, ImageView* pView) @extern("vkCreateImageView"); 
extern fn void destroyImageView (Device device, ImageView imageView, AllocationCallbacks* pAllocator) @extern("vkDestroyImageView"); 
extern fn Result vkCreateShaderModule (Device device, ShaderModuleCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, ShaderModule* pShaderModule) @extern("vkCreateShaderModule"); 
extern fn void destroyShaderModule (Device device, ShaderModule shaderModule, AllocationCallbacks* pAllocator) @extern("vkDestroyShaderModule"); 
extern fn Result vkCreatePipelineCache (Device device, PipelineCacheCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PipelineCache* pPipelineCache) @extern("vkCreatePipelineCache"); 
extern fn void destroyPipelineCache (Device device, PipelineCache pipelineCache, AllocationCallbacks* pAllocator) @extern("vkDestroyPipelineCache"); 
extern fn Result vkGetPipelineCacheData (Device device, PipelineCache pipelineCache, usz* pDataSize, void* pData) @extern("vkGetPipelineCacheData"); 
extern fn Result vkMergePipelineCaches (Device device, PipelineCache dstCache, uint srcCacheCount, PipelineCache* pSrcCaches) @extern("vkMergePipelineCaches"); 
extern fn Result vkCreateGraphicsPipelines (Device device, PipelineCache pipelineCache, uint createInfoCount, GraphicsPipelineCreateInfo* pCreateInfos, AllocationCallbacks* pAllocator, Pipeline* pPipelines) @extern("vkCreateGraphicsPipelines"); 
extern fn Result vkCreateComputePipelines (Device device, PipelineCache pipelineCache, uint createInfoCount, ComputePipelineCreateInfo* pCreateInfos, AllocationCallbacks* pAllocator, Pipeline* pPipelines) @extern("vkCreateComputePipelines"); 
extern fn void destroyPipeline (Device device, Pipeline pipeline, AllocationCallbacks* pAllocator) @extern("vkDestroyPipeline"); 
extern fn Result vkCreatePipelineLayout (Device device, PipelineLayoutCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PipelineLayout* pPipelineLayout) @extern("vkCreatePipelineLayout"); 
extern fn void destroyPipelineLayout (Device device, PipelineLayout pipelineLayout, AllocationCallbacks* pAllocator) @extern("vkDestroyPipelineLayout"); 
extern fn Result vkCreateSampler (Device device, SamplerCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Sampler* pSampler) @extern("vkCreateSampler"); 
extern fn void destroySampler (Device device, Sampler sampler, AllocationCallbacks* pAllocator) @extern("vkDestroySampler"); 
extern fn Result vkCreateDescriptorSetLayout (Device device, DescriptorSetLayoutCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorSetLayout* pSetLayout) @extern("vkCreateDescriptorSetLayout"); 
extern fn void destroyDescriptorSetLayout (Device device, DescriptorSetLayout descriptorSetLayout, AllocationCallbacks* pAllocator) @extern("vkDestroyDescriptorSetLayout"); 
extern fn Result vkCreateDescriptorPool (Device device, DescriptorPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorPool* pDescriptorPool) @extern("vkCreateDescriptorPool"); 
extern fn void destroyDescriptorPool (Device device, DescriptorPool descriptorPool, AllocationCallbacks* pAllocator) @extern("vkDestroyDescriptorPool"); 
extern fn Result vkResetDescriptorPool (Device device, DescriptorPool descriptorPool, DescriptorPoolResetFlags flags) @extern("vkResetDescriptorPool"); 
extern fn Result vkAllocateDescriptorSets (Device device, DescriptorSetAllocateInfo* pAllocateInfo, DescriptorSet* pDescriptorSets) @extern("vkAllocateDescriptorSets"); 
extern fn Result vkFreeDescriptorSets (Device device, DescriptorPool descriptorPool, uint descriptorSetCount, DescriptorSet* pDescriptorSets) @extern("vkFreeDescriptorSets"); 
extern fn void updateDescriptorSets (Device device, uint descriptorWriteCount, WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, CopyDescriptorSet* pDescriptorCopies) @extern("vkUpdateDescriptorSets"); 
extern fn Result vkCreateFramebuffer (Device device, FramebufferCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Framebuffer* pFramebuffer) @extern("vkCreateFramebuffer"); 
extern fn void destroyFramebuffer (Device device, Framebuffer framebuffer, AllocationCallbacks* pAllocator) @extern("vkDestroyFramebuffer"); 
extern fn Result vkCreateRenderPass (Device device, RenderPassCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, RenderPass* pRenderPass) @extern("vkCreateRenderPass"); 
extern fn void destroyRenderPass (Device device, RenderPass renderPass, AllocationCallbacks* pAllocator) @extern("vkDestroyRenderPass"); 
extern fn void getRenderAreaGranularity (Device device, RenderPass renderPass, Extent2D* pGranularity) @extern("vkGetRenderAreaGranularity"); 
extern fn Result vkCreateCommandPool (Device device, CommandPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, CommandPool* pCommandPool) @extern("vkCreateCommandPool"); 
extern fn void destroyCommandPool (Device device, CommandPool commandPool, AllocationCallbacks* pAllocator) @extern("vkDestroyCommandPool"); 
extern fn Result vkResetCommandPool (Device device, CommandPool commandPool, CommandPoolResetFlags flags) @extern("vkResetCommandPool"); 
extern fn Result vkAllocateCommandBuffers (Device device, CommandBufferAllocateInfo* pAllocateInfo, CommandBuffer* pCommandBuffers) @extern("vkAllocateCommandBuffers"); 
extern fn void freeCommandBuffers (Device device, CommandPool commandPool, uint commandBufferCount, CommandBuffer* pCommandBuffers) @extern("vkFreeCommandBuffers"); 
extern fn Result vkBeginCommandBuffer (CommandBuffer commandBuffer, CommandBufferBeginInfo* pBeginInfo) @extern("vkBeginCommandBuffer"); 
extern fn Result vkEndCommandBuffer (CommandBuffer commandBuffer) @extern("vkEndCommandBuffer"); 
extern fn Result vkResetCommandBuffer (CommandBuffer commandBuffer, CommandBufferResetFlags flags) @extern("vkResetCommandBuffer"); 
extern fn void cmdBindPipeline (CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline) @extern("vkCmdBindPipeline"); 
extern fn void cmdSetViewport (CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Viewport* pViewports) @extern("vkCmdSetViewport"); 
extern fn void cmdSetScissor (CommandBuffer commandBuffer, uint firstScissor, uint scissorCount, Rect2D* pScissors) @extern("vkCmdSetScissor"); 
extern fn void cmdSetLineWidth (CommandBuffer commandBuffer, float lineWidth) @extern("vkCmdSetLineWidth"); 
extern fn void cmdSetDepthBias (CommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) @extern("vkCmdSetDepthBias"); 
extern fn void cmdSetBlendConstants (CommandBuffer commandBuffer, float[4] blendConstants) @extern("vkCmdSetBlendConstants"); 
extern fn void cmdSetDepthBounds (CommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) @extern("vkCmdSetDepthBounds"); 
extern fn void cmdSetStencilCompareMask (CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint compareMask) @extern("vkCmdSetStencilCompareMask"); 
extern fn void cmdSetStencilWriteMask (CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint writeMask) @extern("vkCmdSetStencilWriteMask"); 
extern fn void cmdSetStencilReference (CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint reference) @extern("vkCmdSetStencilReference"); 
extern fn void cmdBindDescriptorSets (CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint firstSet, uint descriptorSetCount, DescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets) @extern("vkCmdBindDescriptorSets"); 
extern fn void cmdBindIndexBuffer (CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, IndexType indexType) @extern("vkCmdBindIndexBuffer"); 
extern fn void cmdBindVertexBuffers (CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Buffer* pBuffers, DeviceSize* pOffsets) @extern("vkCmdBindVertexBuffers"); 
extern fn void cmdDraw (CommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance) @extern("vkCmdDraw"); 
extern fn void cmdDrawIndexed (CommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance) @extern("vkCmdDrawIndexed"); 
extern fn void cmdDrawIndirect (CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint drawCount, uint stride) @extern("vkCmdDrawIndirect"); 
extern fn void cmdDrawIndexedIndirect (CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint drawCount, uint stride) @extern("vkCmdDrawIndexedIndirect"); 
extern fn void cmdDispatch (CommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ) @extern("vkCmdDispatch"); 
extern fn void cmdDispatchIndirect (CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset) @extern("vkCmdDispatchIndirect"); 
extern fn void cmdCopyBuffer (CommandBuffer commandBuffer, Buffer srcBuffer, Buffer dstBuffer, uint regionCount, BufferCopy* pRegions) @extern("vkCmdCopyBuffer"); 
extern fn void cmdCopyImage (CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageCopy* pRegions) @extern("vkCmdCopyImage"); 
extern fn void cmdBlitImage (CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageBlit* pRegions, Filter filter) @extern("vkCmdBlitImage"); 
extern fn void cmdCopyBufferToImage (CommandBuffer commandBuffer, Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, uint regionCount, BufferImageCopy* pRegions) @extern("vkCmdCopyBufferToImage"); 
extern fn void cmdCopyImageToBuffer (CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, uint regionCount, BufferImageCopy* pRegions) @extern("vkCmdCopyImageToBuffer"); 
extern fn void cmdUpdateBuffer (CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize dataSize, void* pData) @extern("vkCmdUpdateBuffer"); 
extern fn void cmdFillBuffer (CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize size, uint data) @extern("vkCmdFillBuffer"); 
extern fn void cmdClearColorImage (CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, ClearColorValue* pColor, uint rangeCount, ImageSubresourceRange* pRanges) @extern("vkCmdClearColorImage"); 
extern fn void cmdClearDepthStencilImage (CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, ClearDepthStencilValue* pDepthStencil, uint rangeCount, ImageSubresourceRange* pRanges) @extern("vkCmdClearDepthStencilImage"); 
extern fn void cmdClearAttachments (CommandBuffer commandBuffer, uint attachmentCount, ClearAttachment* pAttachments, uint rectCount, ClearRect* pRects) @extern("vkCmdClearAttachments"); 
extern fn void cmdResolveImage (CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageResolve* pRegions) @extern("vkCmdResolveImage"); 
extern fn void cmdSetEvent (CommandBuffer commandBuffer, Event event, PipelineStageFlags stageMask) @extern("vkCmdSetEvent"); 
extern fn void cmdResetEvent (CommandBuffer commandBuffer, Event event, PipelineStageFlags stageMask) @extern("vkCmdResetEvent"); 
extern fn void cmdWaitEvents (CommandBuffer commandBuffer, uint eventCount, Event* pEvents, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, uint memoryBarrierCount, MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier* pImageMemoryBarriers) @extern("vkCmdWaitEvents"); 
extern fn void cmdPipelineBarrier (CommandBuffer commandBuffer, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlags, uint memoryBarrierCount, MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier* pImageMemoryBarriers) @extern("vkCmdPipelineBarrier"); 
extern fn void cmdBeginQuery (CommandBuffer commandBuffer, QueryPool queryPool, uint query, QueryControlFlags flags) @extern("vkCmdBeginQuery"); 
extern fn void cmdEndQuery (CommandBuffer commandBuffer, QueryPool queryPool, uint query) @extern("vkCmdEndQuery"); 
extern fn void cmdResetQueryPool (CommandBuffer commandBuffer, QueryPool queryPool, uint firstQuery, uint queryCount) @extern("vkCmdResetQueryPool"); 
extern fn void cmdWriteTimestamp (CommandBuffer commandBuffer, PipelineStageFlagBits pipelineStage, QueryPool queryPool, uint query) @extern("vkCmdWriteTimestamp"); 
extern fn void cmdCopyQueryPoolResults (CommandBuffer commandBuffer, QueryPool queryPool, uint firstQuery, uint queryCount, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize stride, QueryResultFlags flags) @extern("vkCmdCopyQueryPoolResults"); 
extern fn void cmdPushConstants (CommandBuffer commandBuffer, PipelineLayout layout, ShaderStageFlags stageFlags, uint offset, uint size, void* pValues) @extern("vkCmdPushConstants"); 
extern fn void cmdBeginRenderPass (CommandBuffer commandBuffer, RenderPassBeginInfo* pRenderPassBegin, SubpassContents contents) @extern("vkCmdBeginRenderPass"); 
extern fn void cmdNextSubpass (CommandBuffer commandBuffer, SubpassContents contents) @extern("vkCmdNextSubpass"); 
extern fn void cmdEndRenderPass (CommandBuffer commandBuffer) @extern("vkCmdEndRenderPass"); 
extern fn void cmdExecuteCommands (CommandBuffer commandBuffer, uint commandBufferCount, CommandBuffer* pCommandBuffers) @extern("vkCmdExecuteCommands"); 
extern fn void destroySurfaceKHR (Instance instance, SurfaceKHR surface, AllocationCallbacks* pAllocator) @extern("vkDestroySurfaceKHR"); 
extern fn Result vkGetPhysicalDeviceSurfaceSupportKHR (PhysicalDevice physicalDevice, uint queueFamilyIndex, SurfaceKHR surface, uint* pSupported) @extern("vkGetPhysicalDeviceSurfaceSupportKHR"); 
extern fn Result vkGetPhysicalDeviceSurfaceCapabilitiesKHR (PhysicalDevice physicalDevice, SurfaceKHR surface, SurfaceCapabilitiesKHR* pSurfaceCapabilities) @extern("vkGetPhysicalDeviceSurfaceCapabilitiesKHR"); 
extern fn Result vkGetPhysicalDeviceSurfaceFormatsKHR (PhysicalDevice physicalDevice, SurfaceKHR surface, uint* pSurfaceFormatCount, SurfaceFormatKHR* pSurfaceFormats) @extern("vkGetPhysicalDeviceSurfaceFormatsKHR"); 
extern fn Result vkGetPhysicalDeviceSurfacePresentModesKHR (PhysicalDevice physicalDevice, SurfaceKHR surface, uint* pPresentModeCount, PresentModeKHR* pPresentModes) @extern("vkGetPhysicalDeviceSurfacePresentModesKHR"); 
extern fn void getPhysicalDeviceFeatures2 (PhysicalDevice physicalDevice, PhysicalDeviceFeatures2* pFeatures) @extern("vkGetPhysicalDeviceFeatures2"); 
extern fn void getPhysicalDeviceProperties2 (PhysicalDevice physicalDevice, PhysicalDeviceProperties2* pProperties) @extern("vkGetPhysicalDeviceProperties2"); 
extern fn void getPhysicalDeviceFormatProperties2 (PhysicalDevice physicalDevice, Format format, FormatProperties2* pFormatProperties) @extern("vkGetPhysicalDeviceFormatProperties2"); 
extern fn Result vkGetPhysicalDeviceImageFormatProperties2 (PhysicalDevice physicalDevice, PhysicalDeviceImageFormatInfo2* pImageFormatInfo, ImageFormatProperties2* pImageFormatProperties) @extern("vkGetPhysicalDeviceImageFormatProperties2"); 
extern fn void getPhysicalDeviceQueueFamilyProperties2 (PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, QueueFamilyProperties2* pQueueFamilyProperties) @extern("vkGetPhysicalDeviceQueueFamilyProperties2"); 
extern fn void getPhysicalDeviceMemoryProperties2 (PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties2* pMemoryProperties) @extern("vkGetPhysicalDeviceMemoryProperties2"); 
extern fn void getPhysicalDeviceSparseImageFormatProperties2 (PhysicalDevice physicalDevice, PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, SparseImageFormatProperties2* pProperties) @extern("vkGetPhysicalDeviceSparseImageFormatProperties2"); 
extern fn void trimCommandPool (Device device, CommandPool commandPool, CommandPoolTrimFlags flags) @extern("vkTrimCommandPool"); 
extern fn void getPhysicalDeviceExternalBufferProperties (PhysicalDevice physicalDevice, PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, ExternalBufferProperties* pExternalBufferProperties) @extern("vkGetPhysicalDeviceExternalBufferProperties"); 
extern fn void getPhysicalDeviceExternalSemaphoreProperties (PhysicalDevice physicalDevice, PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, ExternalSemaphoreProperties* pExternalSemaphoreProperties) @extern("vkGetPhysicalDeviceExternalSemaphoreProperties"); 
extern fn void getPhysicalDeviceExternalFenceProperties (PhysicalDevice physicalDevice, PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, ExternalFenceProperties* pExternalFenceProperties) @extern("vkGetPhysicalDeviceExternalFenceProperties"); 
extern fn Result vkEnumeratePhysicalDeviceGroups (Instance instance, uint* pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) @extern("vkEnumeratePhysicalDeviceGroups"); 
extern fn void getDeviceGroupPeerMemoryFeatures (Device device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, PeerMemoryFeatureFlags* pPeerMemoryFeatures) @extern("vkGetDeviceGroupPeerMemoryFeatures"); 
extern fn Result vkBindBufferMemory2 (Device device, uint bindInfoCount, BindBufferMemoryInfo* pBindInfos) @extern("vkBindBufferMemory2"); 
extern fn Result vkBindImageMemory2 (Device device, uint bindInfoCount, BindImageMemoryInfo* pBindInfos) @extern("vkBindImageMemory2"); 
extern fn void cmdSetDeviceMask (CommandBuffer commandBuffer, uint deviceMask) @extern("vkCmdSetDeviceMask"); 
extern fn void cmdDispatchBase (CommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ) @extern("vkCmdDispatchBase"); 
extern fn Result vkCreateDescriptorUpdateTemplate (Device device, DescriptorUpdateTemplateCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorUpdateTemplate* pDescriptorUpdateTemplate) @extern("vkCreateDescriptorUpdateTemplate"); 
extern fn void destroyDescriptorUpdateTemplate (Device device, DescriptorUpdateTemplate descriptorUpdateTemplate, AllocationCallbacks* pAllocator) @extern("vkDestroyDescriptorUpdateTemplate"); 
extern fn void updateDescriptorSetWithTemplate (Device device, DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, void* pData) @extern("vkUpdateDescriptorSetWithTemplate"); 
extern fn void getBufferMemoryRequirements2 (Device device, BufferMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements) @extern("vkGetBufferMemoryRequirements2"); 
extern fn void getImageMemoryRequirements2 (Device device, ImageMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements) @extern("vkGetImageMemoryRequirements2"); 
extern fn void getImageSparseMemoryRequirements2 (Device device, ImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements) @extern("vkGetImageSparseMemoryRequirements2"); 
extern fn void getDeviceBufferMemoryRequirements (Device device, DeviceBufferMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements) @extern("vkGetDeviceBufferMemoryRequirements"); 
extern fn void getDeviceImageMemoryRequirements (Device device, DeviceImageMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements) @extern("vkGetDeviceImageMemoryRequirements"); 
extern fn void getDeviceImageSparseMemoryRequirements (Device device, DeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements) @extern("vkGetDeviceImageSparseMemoryRequirements"); 
extern fn Result vkCreateSamplerYcbcrConversion (Device device, SamplerYcbcrConversionCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, SamplerYcbcrConversion* pYcbcrConversion) @extern("vkCreateSamplerYcbcrConversion"); 
extern fn void destroySamplerYcbcrConversion (Device device, SamplerYcbcrConversion ycbcrConversion, AllocationCallbacks* pAllocator) @extern("vkDestroySamplerYcbcrConversion"); 
extern fn void getDeviceQueue2 (Device device, DeviceQueueInfo2* pQueueInfo, Queue* pQueue) @extern("vkGetDeviceQueue2"); 
extern fn void getDescriptorSetLayoutSupport (Device device, DescriptorSetLayoutCreateInfo* pCreateInfo, DescriptorSetLayoutSupport* pSupport) @extern("vkGetDescriptorSetLayoutSupport"); 
extern fn Result vkCreateRenderPass2 (Device device, RenderPassCreateInfo2* pCreateInfo, AllocationCallbacks* pAllocator, RenderPass* pRenderPass) @extern("vkCreateRenderPass2"); 
extern fn void cmdBeginRenderPass2 (CommandBuffer commandBuffer, RenderPassBeginInfo* pRenderPassBegin, SubpassBeginInfo* pSubpassBeginInfo) @extern("vkCmdBeginRenderPass2"); 
extern fn void cmdNextSubpass2 (CommandBuffer commandBuffer, SubpassBeginInfo* pSubpassBeginInfo, SubpassEndInfo* pSubpassEndInfo) @extern("vkCmdNextSubpass2"); 
extern fn void cmdEndRenderPass2 (CommandBuffer commandBuffer, SubpassEndInfo* pSubpassEndInfo) @extern("vkCmdEndRenderPass2"); 
extern fn Result vkGetSemaphoreCounterValue (Device device, Semaphore semaphore, ulong* pValue) @extern("vkGetSemaphoreCounterValue"); 
extern fn Result vkWaitSemaphores (Device device, SemaphoreWaitInfo* pWaitInfo, ulong timeout) @extern("vkWaitSemaphores"); 
extern fn Result vkSignalSemaphore (Device device, SemaphoreSignalInfo* pSignalInfo) @extern("vkSignalSemaphore"); 
extern fn void cmdDrawIndirectCount (CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride) @extern("vkCmdDrawIndirectCount"); 
extern fn void cmdDrawIndexedIndirectCount (CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint maxDrawCount, uint stride) @extern("vkCmdDrawIndexedIndirectCount"); 
extern fn ulong vkGetBufferOpaqueCaptureAddress (Device device, BufferDeviceAddressInfo* pInfo) @extern("vkGetBufferOpaqueCaptureAddress"); 
extern fn DeviceAddress vkGetBufferDeviceAddress (Device device, BufferDeviceAddressInfo* pInfo) @extern("vkGetBufferDeviceAddress"); 
extern fn ulong vkGetDeviceMemoryOpaqueCaptureAddress (Device device, DeviceMemoryOpaqueCaptureAddressInfo* pInfo) @extern("vkGetDeviceMemoryOpaqueCaptureAddress"); 
extern fn Result vkGetPhysicalDeviceToolProperties (PhysicalDevice physicalDevice, uint* pToolCount, PhysicalDeviceToolProperties* pToolProperties) @extern("vkGetPhysicalDeviceToolProperties"); 
extern fn void cmdSetCullMode (CommandBuffer commandBuffer, CullModeFlags cullMode) @extern("vkCmdSetCullMode"); 
extern fn void cmdSetFrontFace (CommandBuffer commandBuffer, FrontFace frontFace) @extern("vkCmdSetFrontFace"); 
extern fn void cmdSetPrimitiveTopology (CommandBuffer commandBuffer, PrimitiveTopology primitiveTopology) @extern("vkCmdSetPrimitiveTopology"); 
extern fn void cmdSetViewportWithCount (CommandBuffer commandBuffer, uint viewportCount, Viewport* pViewports) @extern("vkCmdSetViewportWithCount"); 
extern fn void cmdSetScissorWithCount (CommandBuffer commandBuffer, uint scissorCount, Rect2D* pScissors) @extern("vkCmdSetScissorWithCount"); 
extern fn void cmdBindVertexBuffers2 (CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Buffer* pBuffers, DeviceSize* pOffsets, DeviceSize* pSizes, DeviceSize* pStrides) @extern("vkCmdBindVertexBuffers2"); 
extern fn void cmdSetDepthTestEnable (CommandBuffer commandBuffer, uint depthTestEnable) @extern("vkCmdSetDepthTestEnable"); 
extern fn void cmdSetDepthWriteEnable (CommandBuffer commandBuffer, uint depthWriteEnable) @extern("vkCmdSetDepthWriteEnable"); 
extern fn void cmdSetDepthCompareOp (CommandBuffer commandBuffer, CompareOp depthCompareOp) @extern("vkCmdSetDepthCompareOp"); 
extern fn void cmdSetDepthBoundsTestEnable (CommandBuffer commandBuffer, uint depthBoundsTestEnable) @extern("vkCmdSetDepthBoundsTestEnable"); 
extern fn void cmdSetStencilTestEnable (CommandBuffer commandBuffer, uint stencilTestEnable) @extern("vkCmdSetStencilTestEnable"); 
extern fn void cmdSetStencilOp (CommandBuffer commandBuffer, StencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp) @extern("vkCmdSetStencilOp"); 
extern fn void cmdSetRasterizerDiscardEnable (CommandBuffer commandBuffer, uint rasterizerDiscardEnable) @extern("vkCmdSetRasterizerDiscardEnable"); 
extern fn void cmdSetDepthBiasEnable (CommandBuffer commandBuffer, uint depthBiasEnable) @extern("vkCmdSetDepthBiasEnable"); 
extern fn void cmdSetPrimitiveRestartEnable (CommandBuffer commandBuffer, uint primitiveRestartEnable) @extern("vkCmdSetPrimitiveRestartEnable"); 
extern fn Result vkCreatePrivateDataSlot (Device device, PrivateDataSlotCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PrivateDataSlot* pPrivateDataSlot) @extern("vkCreatePrivateDataSlot"); 
extern fn void destroyPrivateDataSlot (Device device, PrivateDataSlot privateDataSlot, AllocationCallbacks* pAllocator) @extern("vkDestroyPrivateDataSlot"); 
extern fn Result vkSetPrivateData (Device device, ObjectType objectType, ulong objectHandle, PrivateDataSlot privateDataSlot, ulong data) @extern("vkSetPrivateData"); 
extern fn void getPrivateData (Device device, ObjectType objectType, ulong objectHandle, PrivateDataSlot privateDataSlot, ulong* pData) @extern("vkGetPrivateData"); 
extern fn void cmdCopyBuffer2 (CommandBuffer commandBuffer, CopyBufferInfo2* pCopyBufferInfo) @extern("vkCmdCopyBuffer2"); 
extern fn void cmdCopyImage2 (CommandBuffer commandBuffer, CopyImageInfo2* pCopyImageInfo) @extern("vkCmdCopyImage2"); 
extern fn void cmdBlitImage2 (CommandBuffer commandBuffer, BlitImageInfo2* pBlitImageInfo) @extern("vkCmdBlitImage2"); 
extern fn void cmdCopyBufferToImage2 (CommandBuffer commandBuffer, CopyBufferToImageInfo2* pCopyBufferToImageInfo) @extern("vkCmdCopyBufferToImage2"); 
extern fn void cmdCopyImageToBuffer2 (CommandBuffer commandBuffer, CopyImageToBufferInfo2* pCopyImageToBufferInfo) @extern("vkCmdCopyImageToBuffer2"); 
extern fn void cmdResolveImage2 (CommandBuffer commandBuffer, ResolveImageInfo2* pResolveImageInfo) @extern("vkCmdResolveImage2"); 
extern fn void cmdSetEvent2 (CommandBuffer commandBuffer, Event event, DependencyInfo* pDependencyInfo) @extern("vkCmdSetEvent2"); 
extern fn void cmdResetEvent2 (CommandBuffer commandBuffer, Event event, PipelineStageFlags2 stageMask) @extern("vkCmdResetEvent2"); 
extern fn void cmdWaitEvents2 (CommandBuffer commandBuffer, uint eventCount, Event* pEvents, DependencyInfo* pDependencyInfos) @extern("vkCmdWaitEvents2"); 
extern fn void cmdPipelineBarrier2 (CommandBuffer commandBuffer, DependencyInfo* pDependencyInfo) @extern("vkCmdPipelineBarrier2"); 
extern fn Result vkQueueSubmit2 (Queue queue, uint submitCount, SubmitInfo2* pSubmits, Fence fence) @extern("vkQueueSubmit2"); 
extern fn void cmdWriteTimestamp2 (CommandBuffer commandBuffer, PipelineStageFlags2 stage, QueryPool queryPool, uint query) @extern("vkCmdWriteTimestamp2"); 
extern fn void cmdBeginRendering (CommandBuffer commandBuffer, RenderingInfo* pRenderingInfo) @extern("vkCmdBeginRendering"); 
extern fn void cmdEndRendering (CommandBuffer commandBuffer) @extern("vkCmdEndRendering"); 

fn void! createInstance (VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance) {
  Result result = vkCreateInstance(pCreateInfo, pAllocator, pInstance);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INITIALIZATION_FAILED: return VkErrors.ERROR_INITIALIZATION_FAILED?;
       case ERROR_LAYER_NOT_PRESENT: return VkErrors.ERROR_LAYER_NOT_PRESENT?;
       case ERROR_EXTENSION_NOT_PRESENT: return VkErrors.ERROR_EXTENSION_NOT_PRESENT?;
       case ERROR_INCOMPATIBLE_DRIVER: return VkErrors.ERROR_INCOMPATIBLE_DRIVER?;
  }
}
fn void! enumeratePhysicalDevices (VkInstance instance, uint* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) {
  Result result = vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INITIALIZATION_FAILED: return VkErrors.ERROR_INITIALIZATION_FAILED?;
  }
}
fn void! getPhysicalDeviceImageFormatProperties (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) {
  Result result = vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_FORMAT_NOT_SUPPORTED: return VkErrors.ERROR_FORMAT_NOT_SUPPORTED?;
  }
}
fn void! createDevice (VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice* pDevice) {
  Result result = vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INITIALIZATION_FAILED: return VkErrors.ERROR_INITIALIZATION_FAILED?;
       case ERROR_EXTENSION_NOT_PRESENT: return VkErrors.ERROR_EXTENSION_NOT_PRESENT?;
       case ERROR_FEATURE_NOT_PRESENT: return VkErrors.ERROR_FEATURE_NOT_PRESENT?;
       case ERROR_TOO_MANY_OBJECTS: return VkErrors.ERROR_TOO_MANY_OBJECTS?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! enumerateInstanceVersion (uint* pApiVersion) {
  Result result = vkEnumerateInstanceVersion(pApiVersion);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
  }
}
fn void! enumerateInstanceLayerProperties (uint* pPropertyCount, VkLayerProperties* pProperties) {
  Result result = vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! enumerateInstanceExtensionProperties (char* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties) {
  Result result = vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_LAYER_NOT_PRESENT: return VkErrors.ERROR_LAYER_NOT_PRESENT?;
  }
}
fn void! enumerateDeviceLayerProperties (VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkLayerProperties* pProperties) {
  Result result = vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! enumerateDeviceExtensionProperties (VkPhysicalDevice physicalDevice, char* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties) {
  Result result = vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_LAYER_NOT_PRESENT: return VkErrors.ERROR_LAYER_NOT_PRESENT?;
  }
}
fn void! queueSubmit (VkQueue queue, uint submitCount, VkSubmitInfo* pSubmits, VkFence fence) {
  Result result = vkQueueSubmit(queue, submitCount, pSubmits, fence);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! queueWaitIdle (VkQueue queue) {
  Result result = vkQueueWaitIdle(queue);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! deviceWaitIdle (VkDevice device) {
  Result result = vkDeviceWaitIdle(device);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! allocateMemory (VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory) {
  Result result = vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_EXTERNAL_HANDLE: return VkErrors.ERROR_INVALID_EXTERNAL_HANDLE?;
       case ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: return VkErrors.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR?;
  }
}
fn void! mapMemory (VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) {
  Result result = vkMapMemory(device, memory, offset, size, flags, ppData);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_MEMORY_MAP_FAILED: return VkErrors.ERROR_MEMORY_MAP_FAILED?;
  }
}
fn void! flushMappedMemoryRanges (VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges) {
  Result result = vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! invalidateMappedMemoryRanges (VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges) {
  Result result = vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! bindBufferMemory (VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
  Result result = vkBindBufferMemory(device, buffer, memory, memoryOffset);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: return VkErrors.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR?;
  }
}
fn void! bindImageMemory (VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
  Result result = vkBindImageMemory(device, image, memory, memoryOffset);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! queueBindSparse (VkQueue queue, uint bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence) {
  Result result = vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! createFence (VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence) {
  Result result = vkCreateFence(device, pCreateInfo, pAllocator, pFence);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! resetFences (VkDevice device, uint fenceCount, VkFence* pFences) {
  Result result = vkResetFences(device, fenceCount, pFences);
  switch(result) { 
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! getFenceStatus (VkDevice device, VkFence fence) {
  Result result = vkGetFenceStatus(device, fence);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! waitForFences (VkDevice device, uint fenceCount, VkFence* pFences, uint waitAll, ulong timeout) {
  Result result = vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! createSemaphore (VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore) {
  Result result = vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createEvent (VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent) {
  Result result = vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! getEventStatus (VkDevice device, VkEvent event) {
  Result result = vkGetEventStatus(device, event);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! setEvent (VkDevice device, VkEvent event) {
  Result result = vkSetEvent(device, event);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! resetEvent (VkDevice device, VkEvent event) {
  Result result = vkResetEvent(device, event);
  switch(result) { 
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createQueryPool (VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool) {
  Result result = vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! getQueryPoolResults (VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, usz dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) {
  Result result = vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! createBuffer (VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer) {
  Result result = vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: return VkErrors.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR?;
  }
}
fn void! createBufferView (VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView) {
  Result result = vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createImage (VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage) {
  Result result = vkCreateImage(device, pCreateInfo, pAllocator, pImage);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_COMPRESSION_EXHAUSTED_EXT: return VkErrors.ERROR_COMPRESSION_EXHAUSTED_EXT?;
       case ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: return VkErrors.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR?;
  }
}
fn void! createImageView (VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView) {
  Result result = vkCreateImageView(device, pCreateInfo, pAllocator, pView);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: return VkErrors.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR?;
  }
}
fn void! createShaderModule (VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule) {
  Result result = vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_SHADER_NV: return VkErrors.ERROR_INVALID_SHADER_NV?;
  }
}
fn void! createPipelineCache (VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache) {
  Result result = vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! getPipelineCacheData (VkDevice device, VkPipelineCache pipelineCache, usz* pDataSize, void* pData) {
  Result result = vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! mergePipelineCaches (VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* pSrcCaches) {
  Result result = vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createGraphicsPipelines (VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
  Result result = vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_SHADER_NV: return VkErrors.ERROR_INVALID_SHADER_NV?;
  }
}
fn void! createComputePipelines (VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
  Result result = vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_SHADER_NV: return VkErrors.ERROR_INVALID_SHADER_NV?;
  }
}
fn void! createPipelineLayout (VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout) {
  Result result = vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createSampler (VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler) {
  Result result = vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: return VkErrors.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR?;
  }
}
fn void! createDescriptorSetLayout (VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout) {
  Result result = vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createDescriptorPool (VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool) {
  Result result = vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_FRAGMENTATION_EXT: return VkErrors.ERROR_FRAGMENTATION_EXT?;
  }
}
fn void! resetDescriptorPool (VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) {
  Result result = vkResetDescriptorPool(device, descriptorPool, flags);
  if (result != 0) VkErrors.ERROR_UNKNOWN?;
}
fn void! allocateDescriptorSets (VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets) {
  Result result = vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_FRAGMENTED_POOL: return VkErrors.ERROR_FRAGMENTED_POOL?;
       case ERROR_OUT_OF_POOL_MEMORY: return VkErrors.ERROR_OUT_OF_POOL_MEMORY?;
  }
}
fn void! freeDescriptorSets (VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets) {
  Result result = vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
  if (result != 0) VkErrors.ERROR_UNKNOWN?;
}
fn void! createFramebuffer (VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer) {
  Result result = vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createRenderPass (VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
  Result result = vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createCommandPool (VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool) {
  Result result = vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! resetCommandPool (VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) {
  Result result = vkResetCommandPool(device, commandPool, flags);
  switch(result) { 
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! allocateCommandBuffers (VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers) {
  Result result = vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! beginCommandBuffer (VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo) {
  Result result = vkBeginCommandBuffer(commandBuffer, pBeginInfo);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! endCommandBuffer (VkCommandBuffer commandBuffer) {
  Result result = vkEndCommandBuffer(commandBuffer);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR: return VkErrors.ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR?;
  }
}
fn void! resetCommandBuffer (VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) {
  Result result = vkResetCommandBuffer(commandBuffer, flags);
  switch(result) { 
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! getPhysicalDeviceSurfaceSupportKHR (VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, uint* pSupported) {
  Result result = vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_SURFACE_LOST_KHR: return VkErrors.ERROR_SURFACE_LOST_KHR?;
  }
}
fn void! getPhysicalDeviceSurfaceCapabilitiesKHR (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) {
  Result result = vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_SURFACE_LOST_KHR: return VkErrors.ERROR_SURFACE_LOST_KHR?;
  }
}
fn void! getPhysicalDeviceSurfaceFormatsKHR (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) {
  Result result = vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_SURFACE_LOST_KHR: return VkErrors.ERROR_SURFACE_LOST_KHR?;
  }
}
fn void! getPhysicalDeviceSurfacePresentModesKHR (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pPresentModeCount, VkPresentModeKHR* pPresentModes) {
  Result result = vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_SURFACE_LOST_KHR: return VkErrors.ERROR_SURFACE_LOST_KHR?;
  }
}
fn void! getPhysicalDeviceImageFormatProperties2 (VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) {
  Result result = vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_FORMAT_NOT_SUPPORTED: return VkErrors.ERROR_FORMAT_NOT_SUPPORTED?;
       case ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR: return VkErrors.ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR?;
       case ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR: return VkErrors.ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR?;
       case ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR: return VkErrors.ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR?;
       case ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR: return VkErrors.ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR?;
       case ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR: return VkErrors.ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR?;
  }
}
fn void! enumeratePhysicalDeviceGroups (VkInstance instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) {
  Result result = vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INITIALIZATION_FAILED: return VkErrors.ERROR_INITIALIZATION_FAILED?;
  }
}
fn void! bindBufferMemory2 (VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos) {
  Result result = vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: return VkErrors.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR?;
  }
}
fn void! bindImageMemory2 (VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos) {
  Result result = vkBindImageMemory2(device, bindInfoCount, pBindInfos);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createDescriptorUpdateTemplate (VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) {
  Result result = vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createSamplerYcbcrConversion (VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) {
  Result result = vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! createRenderPass2 (VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
  Result result = vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! getSemaphoreCounterValue (VkDevice device, VkSemaphore semaphore, ulong* pValue) {
  Result result = vkGetSemaphoreCounterValue(device, semaphore, pValue);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! waitSemaphores (VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout) {
  Result result = vkWaitSemaphores(device, pWaitInfo, timeout);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
fn void! signalSemaphore (VkDevice device, VkSemaphoreSignalInfo* pSignalInfo) {
  Result result = vkSignalSemaphore(device, pSignalInfo);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
  }
}
fn void! getPhysicalDeviceToolProperties (VkPhysicalDevice physicalDevice, uint* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties) {
  Result result = vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
  }
}
fn void! createPrivateDataSlot (VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot) {
  Result result = vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
  }
}
fn void! setPrivateData (VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data) {
  Result result = vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
  }
}
fn void! queueSubmit2 (VkQueue queue, uint submitCount, VkSubmitInfo2* pSubmits, VkFence fence) {
  Result result = vkQueueSubmit2(queue, submitCount, pSubmits, fence);
  switch(result) { 
       case ERROR_OUT_OF_HOST_MEMORY: return VkErrors.ERROR_OUT_OF_HOST_MEMORY?;
       case ERROR_OUT_OF_DEVICE_MEMORY: return VkErrors.ERROR_OUT_OF_DEVICE_MEMORY?;
       case ERROR_DEVICE_LOST: return VkErrors.ERROR_DEVICE_LOST?;
  }
}
